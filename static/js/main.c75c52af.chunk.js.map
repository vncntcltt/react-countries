{"version":3,"sources":["i18n.js","reducers/index.js","api/countryApi.js","actions/countries.js","actions/filters.js","actions/settings.js","reducers/countries.js","reducers/filters.js","reducers/settings.js","store/index.js","components/CountrySearch.js","components/common/SelectFilter.js","components/CountrySidebar.js","components/CountryDisplayType.js","components/CountryStatistics.js","components/common/UnitDisplay.js","components/CountryCard.js","components/CountryGrid.js","components/CountryDataRow.js","components/CountryDatatable.js","components/CountryMap.js","components/CountryBreadcrumb.js","components/common/pagination.js","components/CountryMainView.js","components/CountryDetailsModal.js","components/Countries.js","components/Footer.js","components/Navbar.js","components/Settings.js","components/About.js","components/App.js","index.js"],"names":["i18n","use","reactI18nextModule","init","interpolation","escapeValue","lng","resources","en","translation","fr","keySeparator","history","DATA_STR_FIELDS","DATA_NUM_FIELDS","countryApi","fetch","then","res","ok","Error","concat","status","statusText","countries","regions","subregions","subregionsByRegion","regionalBlocBySize","regionalBlocs","languageBySize","languages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","country","value","region","subregion","includes","push","forEach","rb","regionalBlocName","name","Object","keys","sort","rb1","rb2","l","languageName","l1","l2","err","return","sortAndFilters","filteredCountries","filter","filterRegion","filterSubregion","filterRegionalBloc","find","filterLanguages","length","filterName","lname","toLowerCase","countryNameParts","split","map","part","trim","countryNameMatches","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","startsWith","sortField","sortOrder","a","b","localeCompare","COUNTRIES_DISPLAY_TYPES","filterCountriesByRegion","type","filterCountriesBySubregion","SETTINGS_UNIT_TYPES","initialCountriesState","all","filtered","displayType","selectedCountry","loading","error","state","arguments","action","objectSpread","initialSortAndFiltersState","initialSettingsState","unit","settings","createBrowserHistory","store","createStore","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","thunk","routerMiddleware","withNamespaces","_ref","t","onSearch","react_default","createElement","Form_default","Control","onChange","e","target","placeholder","className","SelectFilter","onFilterChange","_this","props","_this$props","this","values","selectedValue","label","addAll","Group","Label","as","val","key","React","Component","defaultProps","CountrySidebar","prevProps","filterAndSortCountries","Navbar_default","expand","Toggle","aria-controls","class","Collapse","id","components_CountrySearch","filterCountriesByName","common_SelectFilter","filterCountriesByLanguages","regionalBloc","filterCountriesByRegionalBloc","Button_default","variant","onClick","resetFilters","connect","dispatch","filterAndSorts","setDisplayType","ButtonGroup_default","active","CountryStatistics","countriesCount","totalCountriesCount","countriesPct","Number","isInteger","toFixed","react_i18next_dist_es","count","UnitDisplay","selectedUnit","Math","round","propTypes","PropTypes","number","cardMinWidth","alpha3Code","capital","population","area","currencies","flag","countryLanguages","join","countryCurrencies","c","code","countryRegionalBlocs","cardStyles","minWidth","Card_default","style","Header","Media_default","height","src","alt","Body","Title","Subtitle","ListGroup_default","Item","common_UnitDisplay","CountryGrid","Container_default","fluid","Row_default","Col_default","components_CountryCard","CountryDataRow","onCountrySelected","CountryDatatable","Fragment","Table_default","striped","bordered","hover","responsive","components_CountryDataRow","CountryMap","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","countriesLayer","countriesGeoJson","L","setView","tileLayer","attribution","addTo","addCountriesLayer","_this2","hasLayer","remove","geoJSON","feature","toString","onEachFeature","layer","featureCountry","on","bindTooltip","bounds","getBounds","isValid","fitBounds","width","minHeight","CountryBreadcrumb","onNavigateToWorld","onNavigateToRegion","Breadcrumb_default","withPagination","WrappedComponent","_class","_temp","_React$Component","_getPrototypeOf2","_len","args","Array","_key","apply","currentPage","onPageChange","page","setState","inherits","createClass","items","itemsPropName","itemsPerPage","pageCount","ceil","firstItemIndex","currentPageItems","slice","pages","_loop","Pagination_default","defineProperty","First","Prev","Next","Last","PaginatedCountryTable","PaginatedCountryGrid","CountryMainView","components_CountryBreadcrumb","components_CountryDisplayType","components_CountryStatistics","components_CountryMap","console","renderCountries","CountryDetailsModal","onHide","Modal_default","assign","size","aria-labelledby","centered","closeButton","Footer","Countries","fetchCountries","setSelectedCountry","Alert_default","xs","xl","md","components_CountrySidebar","components_CountryMainView","components_CountryDetailsModal","show","json","regionData","catch","fetchCountriesFailure","message","MainNavbar","bg","sticky","LinkContainer_default","to","Brand","Nav_default","Link","Settings","onLanguageChange","lang","i18next","changeLanguage","onUnitChange","setSelectedUnit","language","setSettingsUnit","Tabs_default","defaultActiveKey","Tab_default","eventKey","title","href","rel","App","components_Navbar","Switch","Route","exact","path","Redirect","component","About","components_Footer","ReactDOM","render","es","lib","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.c75c52af.chunk.js","sourcesContent":["import i18n from 'i18next';\r\nimport { reactI18nextModule } from \"react-i18next\";\r\nimport en from './translations/en';\r\nimport fr from './translations/fr';\r\n\r\ni18n\r\n  .use(reactI18nextModule)\r\n  .init({\r\n    interpolation: {\r\n      escapeValue: false\r\n    },\r\n    lng: 'en',\r\n    resources: {\r\n      en: {\r\n        translation: en\r\n      },\r\n      fr: {\r\n        translation: fr\r\n      }\r\n    },\r\n    keySeparator: '#####'\r\n});\r\n\r\n\r\nexport default i18n;\r\n","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport countries from './countries';\r\nimport sortAndFilters from './filters';\r\nimport settings from './settings';\r\n\r\nexport default history => combineReducers({ \r\n  router: connectRouter(history),\r\n  countries, \r\n  sortAndFilters, \r\n  settings \r\n});","const COUNTRIES_API_URL = 'https://restcountries.eu/rest/v2/all'\r\nconst ASC_ORDER = 'asc'\r\nconst DATA_STR_FIELDS = ['name']\r\nconst DATA_NUM_FIELDS = ['population', 'area']\r\nconst DATA_LOCALE = 'en'\r\n\r\nexport default {\r\n\r\n  getCountries () {\r\n    return fetch(COUNTRIES_API_URL).then(res => {\r\n      if (!res.ok) {\r\n        throw new Error(`Could not fetch countries: error ${res.status} ${res.statusText}`);\r\n      }\r\n      return res;\r\n    });\r\n  },\r\n\r\n  buildRegionData (countries) {\r\n    const regions = []\r\n    const subregions = []\r\n    const subregionsByRegion = {}\r\n    const regionalBlocBySize = {}\r\n    let regionalBlocs = []\r\n    const languageBySize = {}\r\n    let languages = []\r\n    for (let country of countries) {\r\n      let { region, subregion } = country\r\n      if (region && !regions.includes(region)) {\r\n        regions.push(region)\r\n      }\r\n      if (subregionsByRegion[region] === undefined) {\r\n        subregionsByRegion[region] = []\r\n      }\r\n      if (subregion && !subregions.includes(subregion)) {\r\n        subregions.push(subregion)\r\n        if (!subregionsByRegion[region].includes(subregion)) {\r\n          subregionsByRegion[region].push(subregion)\r\n        }\r\n      }\r\n      country.regionalBlocs.forEach(rb => {\r\n        let regionalBlocName = rb.name\r\n        if (!regionalBlocBySize[regionalBlocName]) {\r\n          regionalBlocBySize[regionalBlocName] = 1\r\n        } else {\r\n          regionalBlocBySize[regionalBlocName]++\r\n        }\r\n      })\r\n      regionalBlocs = Object.keys(regionalBlocBySize)\r\n      regionalBlocs.sort(\r\n        (rb1, rb2) => regionalBlocBySize[rb2] - regionalBlocBySize[rb1]\r\n      )\r\n      country.languages.forEach(l => {\r\n        let languageName = l.name\r\n        if (!languageBySize[languageName]) {\r\n          languageBySize[languageName] = 1\r\n        } else {\r\n          languageBySize[languageName]++\r\n        }\r\n      })\r\n      languages = Object.keys(languageBySize)\r\n      languages.sort((l1, l2) => languageBySize[l2] - languageBySize[l1])\r\n    }\r\n    return {\r\n      regions,\r\n      subregions,\r\n      subregionsByRegion,\r\n      regionalBlocs,\r\n      languages\r\n    }\r\n  },\r\n\r\n  filterAndSortCountries (countries, sortAndFilters) {\r\n    const filteredCountries = countries.filter(country => {\r\n      if (\r\n        sortAndFilters.filterRegion &&\r\n        country.region !== sortAndFilters.filterRegion\r\n      ) {\r\n        return false\r\n      }\r\n      if (\r\n        sortAndFilters.filterSubregion &&\r\n        country.subregion !== sortAndFilters.filterSubregion\r\n      ) {\r\n        return false\r\n      }\r\n      if (\r\n        sortAndFilters.filterRegionalBloc &&\r\n        !country.regionalBlocs.find(\r\n          rb => rb.name === sortAndFilters.filterRegionalBloc\r\n        )\r\n      ) {\r\n        return false\r\n      }\r\n      if (\r\n        sortAndFilters.filterLanguages &&\r\n        sortAndFilters.filterLanguages.length &&\r\n        !country.languages.find(l =>\r\n          sortAndFilters.filterLanguages.includes(l.name)\r\n        )\r\n      ) {\r\n        return false\r\n      }\r\n      if (sortAndFilters.filterName) {\r\n        const lname = sortAndFilters.filterName.toLowerCase()\r\n        let countryNameParts = country.name\r\n          .toLowerCase()\r\n          .split(/,|'| /)\r\n          .map(part => part.trim())\r\n        let countryNameMatches = false\r\n        for (let part of countryNameParts.filter(part => part.length > 3)) {\r\n          if (part.startsWith(lname)) {\r\n            countryNameMatches = true\r\n            break\r\n          }\r\n        }\r\n        if (!countryNameMatches) {\r\n          return false\r\n        }\r\n      }\r\n      return true\r\n    })\r\n\r\n    if (sortAndFilters.sortField && sortAndFilters.sortOrder) {\r\n      filteredCountries.sort((a, b) => {\r\n        let res = 1\r\n        if (DATA_STR_FIELDS.includes(sortAndFilters.sortField)) {\r\n          res = a[sortAndFilters.sortField].localeCompare(\r\n            b[sortAndFilters.sortField],\r\n            DATA_LOCALE\r\n          )\r\n        } else if (DATA_NUM_FIELDS.includes(sortAndFilters.sortField)) {\r\n          res = a[sortAndFilters.sortField] - b[sortAndFilters.sortField]\r\n        }\r\n        return sortAndFilters.sortOrder === ASC_ORDER ? res : -res\r\n      })\r\n    }\r\n\r\n    return filteredCountries\r\n  }\r\n}\r\n","import countryApi from '../api/countryApi';\r\n\r\nexport const FETCH_COUNTRIES_REQUEST = 'FETCH_COUNTRIES_REQUEST';\r\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS';\r\nexport const FETCH_COUNTRIES_FAILURE = 'FETCH_COUNTRIES_FAILURE';\r\nexport const SET_COUNTRIES_DISPLAY_TYPE = 'SET_COUNTRIES_DISPLAY_TYPE';\r\nexport const FILTER_AND_SORT_COUNTRIES = 'FILTER_AND_SORT_COUNTRIES';\r\nexport const SET_SELECTED_COUNTRY = 'SET_SELECTED_COUNTRY';\r\n\r\nexport const COUNTRIES_DISPLAY_TYPES = {\r\n  MAP: 'map',\r\n  GRID: 'grid',\r\n  TABLE: 'table'\r\n};\r\n\r\nexport const fetchCountriesRequest = () => ({\r\n  type: FETCH_COUNTRIES_REQUEST\r\n});\r\n\r\nexport const fetchCountriesSuccess = ({ countries, regions, subregions, languages, regionalBlocs }) => ({\r\n  type: FETCH_COUNTRIES_SUCCESS,\r\n  countries,\r\n  regions,\r\n  subregions,\r\n  languages,\r\n  regionalBlocs\r\n});\r\n\r\nexport const fetchCountriesFailure = error => ({\r\n  type: FETCH_COUNTRIES_FAILURE,\r\n  error\r\n});\r\n\r\nexport const fetchCountries = () => {\r\n  return dispatch => {\r\n    dispatch(fetchCountriesRequest());\r\n    countryApi.getCountries()\r\n      .then(res => res.json())\r\n      .then(\r\n        countries => {\r\n          const regionData = countryApi.buildRegionData(countries);\r\n          dispatch(fetchCountriesSuccess({ countries, ...regionData }));\r\n        }\r\n      ).catch(error => {\r\n        dispatch(fetchCountriesFailure(error.message));\r\n      });\r\n  };\r\n};\r\n\r\nexport const filterAndSortCountries = (countries, filterAndSorts) => {\r\n  const filteredCountries = countryApi.filterAndSortCountries(countries, filterAndSorts);\r\n  return {\r\n    type: FILTER_AND_SORT_COUNTRIES,\r\n    filteredCountries\r\n  };\r\n};\r\n\r\nexport const setCountryDisplayType = displayType => ({\r\n  type: SET_COUNTRIES_DISPLAY_TYPE,\r\n  displayType\r\n});\r\n\r\nexport const setSelectedCountry = country => ({\r\n  type: SET_SELECTED_COUNTRY,\r\n  country\r\n});","export const FILTER_COUNTRIES_BY_REGION = 'FILTER_COUNTRIES_BY_REGION';\r\nexport const FILTER_COUNTRIES_BY_SUBREGION = 'FILTER_COUNTRIES_BY_SUBREGION';\r\nexport const FILTER_COUNTRIES_BY_REGIONAL_BLOC = 'FILTER_COUNTRIES_BY_REGIONAL_BLOC';\r\nexport const FILTER_COUNTRIES_BY_LANGUAGES = 'FILTER_COUNTRIES_BY_LANGUAGES';\r\nexport const FILTER_COUNTRIES_BY_NAME = 'FILTER_COUNTRIES_BY_NAME';\r\nexport const RESET_FILTERS = 'RESET_FILTERS';\r\n\r\nexport const filterCountriesByRegion = filterRegion => ({\r\n  type: FILTER_COUNTRIES_BY_REGION,\r\n  filterRegion\r\n});\r\n\r\nexport const filterCountriesBySubregion = filterSubregion => ({\r\n  type: FILTER_COUNTRIES_BY_SUBREGION,\r\n  filterSubregion\r\n});\r\n\r\nexport const filterCountriesByRegionalBloc = filterRegionalBloc => ({\r\n  type: FILTER_COUNTRIES_BY_REGIONAL_BLOC,\r\n  filterRegionalBloc\r\n});\r\n\r\nexport const filterCountriesByLanguages = filterLanguages => ({\r\n  type: FILTER_COUNTRIES_BY_LANGUAGES,\r\n  filterLanguages\r\n});\r\n\r\nexport const filterCountriesByName = filterName => ({\r\n  type: FILTER_COUNTRIES_BY_NAME,\r\n  filterName\r\n});\r\n\r\nexport const resetFilters = () => ({\r\n  type: RESET_FILTERS  \r\n});","export const SET_SETTINGS_UNIT = 'SET_SETTINGS_UNIT'; \r\n\r\nexport const SETTINGS_UNIT_TYPES = {\r\n  METRIC: 'metric',\r\n  IMPERIAL: 'imperial'\r\n};\r\n\r\nexport const setSettingsUnit = unit => ({\r\n  type: SET_SETTINGS_UNIT,\r\n  unit\r\n});\r\n","import { \r\n  SET_COUNTRIES_DISPLAY_TYPE, \r\n  COUNTRIES_DISPLAY_TYPES,\r\n  FILTER_AND_SORT_COUNTRIES,\r\n  FETCH_COUNTRIES_REQUEST,\r\n  FETCH_COUNTRIES_SUCCESS,\r\n  FETCH_COUNTRIES_FAILURE,\r\n  SET_SELECTED_COUNTRY\r\n} from '../actions';\r\n\r\nconst initialCountriesState = {\r\n  all: [],\r\n  filtered: [],\r\n  regions: [],\r\n  subregions: [],\r\n  languages: [],\r\n  regionalBlocs: [],\r\n  displayType: COUNTRIES_DISPLAY_TYPES.MAP,\r\n  selectedCountry: null,\r\n  loading: null,\r\n  error: null\r\n};\r\n\r\nconst countries = (state = initialCountriesState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_COUNTRIES_REQUEST:\r\n      return { ...state, loading: true, error: null };\r\n    case FETCH_COUNTRIES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        all: action.countries, \r\n        filtered: action.countries, \r\n        regions: action.regions, \r\n        subregions: action.subregions,\r\n        languages: action.languages,\r\n        regionalBlocs: action.regionalBlocs      \r\n      };\r\n    case FETCH_COUNTRIES_FAILURE:\r\n      return { \r\n        ...state,\r\n        loading: false,\r\n        error: action.error\r\n      };\r\n    case SET_COUNTRIES_DISPLAY_TYPE:\r\n      return { ...state, displayType: action.displayType };\r\n    case FILTER_AND_SORT_COUNTRIES:\r\n      return  {...state, filtered: action.filteredCountries };\r\n    case SET_SELECTED_COUNTRY:\r\n      return {...state, selectedCountry: action.country};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default countries;","import { \r\n  FILTER_COUNTRIES_BY_REGION,\r\n  FILTER_COUNTRIES_BY_REGIONAL_BLOC,\r\n  FILTER_COUNTRIES_BY_SUBREGION,\r\n  FILTER_COUNTRIES_BY_LANGUAGES,\r\n  FILTER_COUNTRIES_BY_NAME,\r\n  RESET_FILTERS\r\n} from '../actions';\r\n\r\nconst initialSortAndFiltersState = {\r\n  filterRegion: '',\r\n  filterSubregion: '',\r\n  filterRegionalBloc: '',\r\n  filterLanguages: '',\r\n  filterName: ''\r\n}\r\n\r\nconst sortAndFilters = (state = initialSortAndFiltersState, action) => {\r\n  switch (action.type) {\r\n    case FILTER_COUNTRIES_BY_REGION:\r\n      return { ...state, filterRegion: action.filterRegion, filterSubregion: '' };\r\n    case FILTER_COUNTRIES_BY_SUBREGION:\r\n      return { ...state, filterSubregion: action.filterSubregion };\r\n    case FILTER_COUNTRIES_BY_REGIONAL_BLOC:\r\n      return { ...state, filterRegionalBloc: action.filterRegionalBloc };\r\n    case FILTER_COUNTRIES_BY_LANGUAGES:\r\n      return { ...state, filterLanguages: action.filterLanguages };\r\n    case FILTER_COUNTRIES_BY_NAME:\r\n      return { ...state, filterName: action.filterName };                        \r\n    case RESET_FILTERS:\r\n      return { ...state, ...initialSortAndFiltersState };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default sortAndFilters;","import { SET_SETTINGS_UNIT, SETTINGS_UNIT_TYPES } from '../actions';\r\n\r\nconst initialSettingsState = {\r\n  unit: SETTINGS_UNIT_TYPES.METRIC\r\n};\r\n\r\nconst settings = (state = initialSettingsState, action) => {\r\n  switch(action.type) {\r\n    case SET_SETTINGS_UNIT:\r\n      return { ...state, unit: action.unit };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default settings;","    import { createStore, applyMiddleware } from \"redux\";\r\n    import thunk from \"redux-thunk\";\r\n    import createBrowserHistory from 'history/createBrowserHistory';\r\n    import { routerMiddleware } from 'connected-react-router';\r\n    import { composeWithDevTools } from 'redux-devtools-extension';\r\n    \r\n    import createRootReducer from \"../reducers/index\";\r\n    \r\n    export const history = createBrowserHistory();\r\n    export const store = createStore(\r\n      createRootReducer(history),\r\n      composeWithDevTools(\r\n        applyMiddleware(thunk, routerMiddleware(history))\r\n      )\r\n    );","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport Form from 'react-bootstrap/lib/Form';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nconst CountrySearch = ({ t, value, onSearch }) => {\r\n  return <Form.Control\r\n    value={value}\r\n    onChange={e => onSearch(e.target.value)} \r\n    placeholder={t('toolbar.label.search')}\r\n    className=\"mb-3\"\r\n  />;\r\n};\r\n\r\nCountrySearch.propTypes = {\r\n  onSearch: PropTypes.func.isRequired\r\n};\r\n\r\nexport default withNamespaces()(CountrySearch);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/lib/Form';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nclass SelectFilter extends React.Component {\r\n\r\n  static propTypes = {    \r\n    values: PropTypes.array.isRequired,\r\n    selectedValue: PropTypes.string.isRequired,\r\n    onFilterChange: PropTypes.func.isRequired,\r\n    label: PropTypes.string,\r\n    addAll: PropTypes.bool\r\n  }\r\n\r\n  static defaultProps = {\r\n    label: '',\r\n    addAll: false\r\n  }\r\n\r\n  onFilterChange = e => {\r\n    this.props.onFilterChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    const { t, values, selectedValue, label, addAll } = this.props;\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>{label}</Form.Label>\r\n        <Form.Control as=\"select\" value={selectedValue} onChange={this.onFilterChange}>\r\n        {addAll ? <option value=\"\">{t('filters.placeholder.all')}</option> : ''}\r\n        {values.map(val => \r\n          <option key={val} value={val}>{val}</option>\r\n        )}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withNamespaces()(SelectFilter);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from 'react-bootstrap/lib/Form';\r\nimport Button from 'react-bootstrap/lib/Button';\r\nimport Navbar from 'react-bootstrap/lib/Navbar';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nimport CountrySearch from './CountrySearch';\r\nimport SelectFilter from './common/SelectFilter';\r\n\r\nimport {   \r\n  filterAndSortCountries,\r\n  filterCountriesByRegion,\r\n  filterCountriesBySubregion,\r\n  filterCountriesByRegionalBloc,\r\n  filterCountriesByLanguages,\r\n  filterCountriesByName,\r\n  resetFilters\r\n} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    countries: state.countries.all,\r\n    regions: state.countries.regions,\r\n    subregions: state.countries.subregions,\r\n    languages: state.countries.languages,\r\n    regionalBlocs: state.countries.regionalBlocs,    \r\n    sortAndFilters: state.sortAndFilters\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    filterAndSortCountries: (countries, sortAndFilters) => {\r\n      dispatch(filterAndSortCountries(countries, sortAndFilters))\r\n    },\r\n    filterCountriesByRegion: region => {\r\n      dispatch(filterCountriesByRegion(region))\r\n    },\r\n    filterCountriesBySubregion: subregion => {\r\n      dispatch(filterCountriesBySubregion(subregion))\r\n    },\r\n    filterCountriesByRegionalBloc: regionalBloc => {\r\n      dispatch(filterCountriesByRegionalBloc(regionalBloc))\r\n    },\r\n    filterCountriesByLanguages: languages => {\r\n      dispatch(filterCountriesByLanguages(languages))\r\n    },\r\n    filterCountriesByName: name => {\r\n      dispatch(filterCountriesByName(name))\r\n    },\r\n    resetFilters: () => {\r\n      dispatch(resetFilters())\r\n    }\r\n  };\r\n};\r\n\r\nclass CountrySidebar extends React.Component {\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.sortAndFilters !== this.props.sortAndFilters) {\r\n      this.props.filterAndSortCountries(this.props.countries, this.props.sortAndFilters);\r\n    }\r\n  }  \r\n  \r\n  render() {\r\n    const { t } = this.props;\r\n    return (\r\n      <aside>\r\n        <Navbar expand=\"md\" className=\"px-0\">\r\n          <Navbar.Toggle aria-controls=\"responsive-sidebar\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n            <span className=\"px-2\">{t('filters.header')}</span>\r\n          </Navbar.Toggle>\r\n          <Navbar.Collapse id=\"responsive-sidebar\">\r\n              <Form className=\"py-3\">\r\n                \r\n                <CountrySearch\r\n                  value={this.props.sortAndFilters.filterName}\r\n                  onSearch={name => this.props.filterCountriesByName(name)} \r\n                />\r\n\r\n                <SelectFilter \r\n                  label={t('filters.label.region')}\r\n                  values={this.props.regions}\r\n                  selectedValue={this.props.sortAndFilters.filterRegion}\r\n                  onFilterChange={region => this.props.filterCountriesByRegion(region)} \r\n                  addAll \r\n                />\r\n\r\n                <SelectFilter \r\n                  label={t('filters.label.subregion')}\r\n                  values={this.props.subregions}\r\n                  selectedValue={this.props.sortAndFilters.filterSubregion}\r\n                  onFilterChange={subregion => this.props.filterCountriesBySubregion(subregion)} \r\n                  addAll \r\n                />\r\n\r\n                <SelectFilter \r\n                  label={t('filters.label.languages')}\r\n                  values={this.props.languages}\r\n                  selectedValue={this.props.sortAndFilters.filterLanguages}\r\n                  onFilterChange={languages => this.props.filterCountriesByLanguages(languages)} \r\n                  addAll \r\n                />\r\n\r\n                <SelectFilter \r\n                  label={t('filters.label.regionalBloc')} \r\n                  values={this.props.regionalBlocs}\r\n                  selectedValue={this.props.sortAndFilters.filterRegionalBloc}\r\n                  onFilterChange={regionalBloc => this.props.filterCountriesByRegionalBloc(regionalBloc)} \r\n                  addAll \r\n                />\r\n\r\n                <Button \r\n                  variant=\"primary\" \r\n                  onClick={this.props.resetFilters}\r\n                  className=\"my-2\">\r\n                  {t('filters.button.reset')}\r\n                </Button>\r\n\r\n              </Form>         \r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n      </aside>\r\n    );   \r\n  }\r\n}\r\n\r\nexport default withNamespaces()(connect(mapStateToProps, mapDispatchToProps)(CountrySidebar));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Button from 'react-bootstrap/lib/Button';\r\nimport ButtonGroup from 'react-bootstrap/lib/ButtonGroup';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nimport { COUNTRIES_DISPLAY_TYPES, setCountryDisplayType} from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    displayType: state.countries.displayType\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setDisplayType: e => {\r\n      dispatch(setCountryDisplayType(e.target.value))\r\n    }\r\n  };\r\n};\r\n\r\nconst CountryDisplayType = ({ t, displayType, setDisplayType }) => {\r\n  return (\r\n    <ButtonGroup className=\"mb-3\">\r\n      <Button \r\n        value={COUNTRIES_DISPLAY_TYPES.MAP}\r\n        active={displayType === COUNTRIES_DISPLAY_TYPES.MAP} \r\n        onClick={setDisplayType}>\r\n        {t('countries.toolbar.map')}\r\n      </Button>\r\n      <Button \r\n        value={COUNTRIES_DISPLAY_TYPES.GRID} \r\n        active={displayType === COUNTRIES_DISPLAY_TYPES.GRID} \r\n        onClick={setDisplayType}>\r\n        {t('countries.toolbar.grid')}\r\n      </Button>\r\n      <Button \r\n        value={COUNTRIES_DISPLAY_TYPES.TABLE} \r\n        active={displayType === COUNTRIES_DISPLAY_TYPES.TABLE} \r\n        onClick={setDisplayType}>\r\n        {t('countries.toolbar.table')}\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n};\r\n\r\nexport default withNamespaces()(connect(mapStateToProps, mapDispatchToProps)(CountryDisplayType));","import React from 'react';\r\nimport { NamespacesConsumer } from 'react-i18next';\r\n\r\nconst displayPct = function(val) {\r\n  if (Number.isInteger(val)) {\r\n    return val + '%';\r\n  } else {\r\n    return val.toFixed(2) + '%';\r\n  }\r\n}\r\n\r\nconst CountryStatistics = ({ countries, filteredCountries }) => {\r\n  const countriesCount = filteredCountries.length;\r\n  const totalCountriesCount = countries.length;\r\n  const countriesPct = displayPct(((countriesCount / totalCountriesCount) * 100));\r\n  return  (    \r\n    <NamespacesConsumer>\r\n    {\r\n      t => (\r\n        <div className=\"float-lg-right py-2\">\r\n          <span>{countriesCount} {t('statistics.text.countries', { count: countriesCount })}</span>\r\n          <span className=\"text-muted px-1\"> ({countriesPct} {t('statistics.subtext.worldCountries')})</span>\r\n        </div>\r\n      )\r\n    }\r\n    </NamespacesConsumer>\r\n  );\r\n\r\n};\r\n\r\nexport default CountryStatistics;\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { SETTINGS_UNIT_TYPES } from '../../actions';\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedUnit: state.settings.unit\r\n});\r\n\r\nconst UnitDisplay = ({ value, selectedUnit }) => {\r\n  let val = value;\r\n  if (selectedUnit === SETTINGS_UNIT_TYPES.IMPERIAL) {\r\n    val = Math.round(val / 2,59) + ' sq mi';\r\n  } else {\r\n    val = val + ' km²';\r\n  }\r\n  return val;\r\n};\r\n\r\nUnitDisplay.propTypes = {\r\n  value: PropTypes.number\r\n};\r\n\r\nexport default connect(mapStateToProps)(UnitDisplay);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from 'react-bootstrap/lib/Card';\r\nimport ListGroup from 'react-bootstrap/lib/ListGroup'\r\nimport Media from 'react-bootstrap/lib/Media';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nimport UnitDisplay from './common/UnitDisplay';\r\n\r\nconst CountryCard = ({ t, country, cardMinWidth }) => {\r\n  const { name, alpha3Code, region, subregion, capital, population, area, languages, currencies, regionalBlocs, flag } = country;\r\n  const countryLanguages = languages.map(l => l.name).join(', ');\r\n  const countryCurrencies = currencies.map(c => `${c.name} (${c.code})`).join(', ');\r\n  const countryRegionalBlocs = regionalBlocs.map(rb => rb.name).join(', ');\r\n  const cardStyles = cardMinWidth ? { minWidth: cardMinWidth } : {};\r\n  return (\r\n    <Card style={cardStyles}>\r\n      <Card.Header>\r\n        <Media>\r\n          <img\r\n            height={64}\r\n            className=\"mr-3\"\r\n            src={flag}\r\n            alt=\"Country flag\"\r\n          />\r\n          <Media.Body>\r\n            <Card.Title>{name} ({alpha3Code})</Card.Title>\r\n            <Card.Subtitle className=\"mb-2 text-muted\">\r\n              {region} {subregion && '/ ' + subregion}\r\n            </Card.Subtitle>\r\n          </Media.Body>\r\n        </Media>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item>\r\n            <span className=\"text-muted pr-2\">{t('country.label.capital')}</span>\r\n            {capital}\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <span className=\"text-muted pr-2\">{t('country.label.regionalBlocs', { count: regionalBlocs.length })}</span>\r\n            {countryRegionalBlocs}\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <span className=\"text-muted pr-2\">{t('country.label.population')}</span>\r\n            {population}\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <span className=\"text-muted pr-2\">{t('country.label.area')}</span>\r\n            <UnitDisplay value={area} />\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <span className=\"text-muted pr-2\">{t('country.label.languages', { count: languages.length })}</span>\r\n            {countryLanguages}\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <span className=\"text-muted pr-2\">{t('country.label.currencies', { count: currencies.length })}</span>\r\n            {countryCurrencies}\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nCountryCard.propTypes = {\r\n  country: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    alpha3Code: PropTypes.string.isRequired,\r\n    capital: PropTypes.string,\r\n    region: PropTypes.string,\r\n    subregion: PropTypes.string,\r\n    population: PropTypes.number,\r\n    area: PropTypes.number,\r\n    languages: PropTypes.array,\r\n    currencies: PropTypes.array,\r\n    regionalBlocs: PropTypes.array\r\n  })\r\n};\r\n\r\nexport default withNamespaces()(CountryCard);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Container from 'react-bootstrap/lib/Container';\r\nimport Row from 'react-bootstrap/lib/Row';\r\nimport Col from 'react-bootstrap/lib/Col';\r\n\r\nimport CountryCard from './CountryCard';\r\n\r\nconst CountryGrid = ({ countries }) => {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        {countries.map(country => \r\n          <Col key={country.alpha3Code} className=\"mb-4\">\r\n            <CountryCard country={country} cardMinWidth={300} />\r\n          </Col> \r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nCountryGrid.propTypes = {\r\n  countries: PropTypes.array.isRequired\r\n}\r\n\r\nexport default CountryGrid;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport UnitDisplay from './common/UnitDisplay';\r\n\r\nconst CountryDataRow = ({ country, onCountrySelected }) => {\r\n  const { name, alpha3Code, capital, region, subregion, population, area } = country;\r\n  return (\r\n    <tr onClick={() => onCountrySelected(country)}>\r\n      <td>{name}</td>\r\n      <td>{alpha3Code}</td>\r\n      <td>{capital}</td>\r\n      <td>{region}</td>\r\n      <td>{subregion}</td>\r\n      <td>{population}</td>\r\n      <td><UnitDisplay value={area} /></td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nCountryDataRow.propTypes = {\r\n  country: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    alpha3Code: PropTypes.string.isRequired,\r\n    capital: PropTypes.string,\r\n    region: PropTypes.string,\r\n    subregion: PropTypes.string,\r\n    population: PropTypes.number,\r\n    area: PropTypes.number\r\n  }),\r\n  onCountrySelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CountryDataRow;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Table from 'react-bootstrap/lib/Table';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nimport CountryDataRow from './CountryDataRow';\r\n\r\nclass CountryDatatable extends React.Component {\r\n\r\n  render() {\r\n    const { t, countries, onCountrySelected } = this.props;\r\n    return (\r\n      <>\r\n        <Table striped bordered hover responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>{t('country.label.name')}</th>\r\n              <th>{t('country.label.code')}</th>\r\n              <th>{t('country.label.capital')}</th>\r\n              <th>{t('country.label.region')}</th>\r\n              <th>{t('country.label.subregion')}</th>\r\n              <th>{t('country.label.population')}</th>\r\n              <th>{t('country.label.area')}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {countries.map(country =>\r\n              <CountryDataRow \r\n                key={country.alpha3Code} \r\n                country={country} \r\n                onCountrySelected={country => onCountrySelected(country)}\r\n              />\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nCountryDatatable.propTypes = {\r\n  countries: PropTypes.array.isRequired,\r\n  onCountrySelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withNamespaces()(CountryDatatable);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport L from 'leaflet'\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport countriesGeoJson from '../assets/countries.geo.json'\r\n\r\nclass CountryMap extends React.Component {\r\n\r\n  static propTypes = {\r\n    countries: PropTypes.array,\r\n    onCountrySelected: PropTypes.func.isRequired\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.map = null;\r\n    this.countriesLayer = null;\r\n    this.countriesGeoJson = countriesGeoJson;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.map = L.map('map').setView([0, 0], 2);\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution:\r\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(this.map);\r\n    if (this.props.countries) {\r\n      this.addCountriesLayer();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.addCountriesLayer();\r\n  }\r\n\r\n  addCountriesLayer() {\r\n    if (this.map.hasLayer(this.countriesLayer)) {\r\n      this.countriesLayer.remove()\r\n    }\r\n    this.countriesLayer = L.geoJSON(this.countriesGeoJson, {\r\n      filter: (feature) => {\r\n        const countryIds = this.props.countries.map(c => c.alpha3Code)\r\n        return countryIds.includes(feature.id.toString())\r\n      },\r\n      onEachFeature: (feature, layer) => {\r\n        const featureCountry = this.props.countries.find(\r\n          country => country.alpha3Code === feature.id\r\n        );\r\n        layer.on('click', e => {\r\n          if (featureCountry) {\r\n            this.props.onCountrySelected(featureCountry);\r\n          }\r\n        })\r\n        layer.bindTooltip('<strong>' + featureCountry.name + '</strong>')\r\n      }\r\n    })\r\n    this.countriesLayer.addTo(this.map)\r\n    let bounds = this.countriesLayer.getBounds()\r\n    if (bounds.isValid()) {\r\n      this.map.fitBounds(bounds)\r\n    } else {\r\n      this.map.setView([0, 0], 2)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const mapStyle = { width: \"100%\", minWidth: 380, minHeight: 760 };\r\n    return <div id=\"map\" style={mapStyle} />;\r\n  }\r\n\r\n}\r\n\r\nexport default CountryMap;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Breadcrumb from 'react-bootstrap/lib/Breadcrumb';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nimport { filterCountriesByRegion, filterCountriesBySubregion } from '../actions';\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onNavigateToWorld: () => {\r\n      dispatch(filterCountriesByRegion(''))\r\n    },\r\n    onNavigateToRegion: () => {\r\n      dispatch(filterCountriesBySubregion(''))\r\n    }\r\n  };\r\n};\r\n\r\nclass CountryBreadcrumb extends React.Component {\r\n\r\n  static propTypes = {\r\n    region: PropTypes.string,\r\n    subregion: PropTypes.string\r\n  };\r\n\r\n  render() {\r\n    const { t, region, subregion, onNavigateToWorld, onNavigateToRegion } = this.props;\r\n    return (\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item active={!region && !subregion} onClick={onNavigateToWorld}>\r\n          {t('navigation.label.world')}\r\n        </Breadcrumb.Item>\r\n        {region && <Breadcrumb.Item active={!subregion} onClick={onNavigateToRegion}>\r\n          {region}\r\n        </Breadcrumb.Item>}\r\n        {region && subregion && <Breadcrumb.Item active>\r\n          {subregion}\r\n        </Breadcrumb.Item>}\r\n      </Breadcrumb>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withNamespaces()(connect(null, mapDispatchToProps)(CountryBreadcrumb));","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Pagination from 'react-bootstrap/lib/Pagination';\r\n\r\nexport const withPagination = WrappedComponent => {\r\n  \r\n  return class extends React.Component {      \r\n\r\n    static propTypes = {\r\n      items: PropTypes.array.isRequired,\r\n      itemsPropName: PropTypes.string.isRequired,\r\n      itemsPerPage: PropTypes.number\r\n    };\r\n\r\n    static defaultProps = {\r\n      itemsPerPage: 10\r\n    };\r\n\r\n    state = {\r\n      currentPage: 1\r\n    };\r\n\r\n    onPageChange = page => {\r\n      this.setState({ currentPage: page });\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (prevProps.items !== this.props.items) {\r\n        this.setState({currentPage: 1});\r\n      }\r\n    }    \r\n\r\n    render() {\r\n      const { items, itemsPropName, itemsPerPage } = this.props;\r\n      const pageCount = Math.ceil(items.length / itemsPerPage);\r\n      const firstItemIndex = (this.state.currentPage - 1) * itemsPerPage;\r\n      const currentPageItems = items.slice(firstItemIndex, firstItemIndex + itemsPerPage);\r\n      const pages = [];\r\n      for (let page = 1; page <= pageCount; page++) {\r\n        pages.push((\r\n          <Pagination.Item\r\n            key={page} \r\n            active={this.state.currentPage === page}\r\n            onClick={() => this.onPageChange(page)}\r\n          >\r\n            {page}\r\n          </Pagination.Item>\r\n        ));\r\n      }\r\n      return (\r\n        <>\r\n          <WrappedComponent {...{...this.props, [itemsPropName]: currentPageItems}} />\r\n          <Pagination>\r\n            <Pagination.First onClick={() => this.onPageChange(1)} />\r\n            <Pagination.Prev onClick={() => { if (this.state.currentPage > 1) this.onPageChange(this.state.currentPage - 1); }} />\r\n            {pages}\r\n            <Pagination.Next onClick={() => { if (this.state.currentPage < pageCount) this.onPageChange(this.state.currentPage + 1); }}/>\r\n            <Pagination.Last onClick={() => this.onPageChange(pageCount) } />\r\n          </Pagination>\r\n        </>\r\n      );\r\n    }\r\n\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nimport { COUNTRIES_DISPLAY_TYPES } from '../actions';\r\n\r\nimport CountryDisplayType from './CountryDisplayType';\r\nimport CountryStatistics from './CountryStatistics';\r\nimport CountryGrid from './CountryGrid';\r\nimport CountryDatatable from './CountryDatatable';\r\nimport CountryMap from './CountryMap';\r\nimport CountryBreadcrumb from './CountryBreadcrumb';\r\nimport { withPagination } from './common/pagination';\r\n\r\nconst PaginatedCountryTable = withPagination(CountryDatatable);\r\nconst PaginatedCountryGrid = withPagination(CountryGrid);\r\n\r\nconst ITEMS_PER_TABLE_PAGE = 12;\r\nconst ITEMS_PER_GRID_PAGE = 8;\r\n\r\nconst renderCountries = (filteredCountries, displayType, onCountrySelected) => {\r\n  switch(displayType) {\r\n    case COUNTRIES_DISPLAY_TYPES.GRID:\r\n      return <PaginatedCountryGrid \r\n        items={filteredCountries}\r\n        itemsPropName=\"countries\"\r\n        itemsPerPage={ITEMS_PER_GRID_PAGE}\r\n      />;\r\n    case COUNTRIES_DISPLAY_TYPES.TABLE:\r\n      return <PaginatedCountryTable\r\n        items={filteredCountries}\r\n        itemsPropName=\"countries\"\r\n        itemsPerPage={ITEMS_PER_TABLE_PAGE}\r\n        onCountrySelected={onCountrySelected}\r\n      />;\r\n    case COUNTRIES_DISPLAY_TYPES.MAP:\r\n      return <CountryMap \r\n        countries={filteredCountries} \r\n        onCountrySelected={onCountrySelected}\r\n      />;\r\n    default:\r\n      console.error('Unknown display type', displayType);\r\n  }\r\n}\r\n\r\nconst CountryMainView = ({ countries, filteredCountries, sortAndFilters, displayType, onCountrySelected }) => {\r\n  return (\r\n    <main>\r\n      <CountryBreadcrumb\r\n        region={sortAndFilters.filterRegion} \r\n        subregion={sortAndFilters.filterSubregion} \r\n      />\r\n      <CountryDisplayType />\r\n      <CountryStatistics\r\n        countries={countries} \r\n        filteredCountries={filteredCountries}        \r\n      />\r\n      {renderCountries(filteredCountries, displayType, onCountrySelected)}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default CountryMainView;\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/lib/Modal';\r\nimport Button from 'react-bootstrap/lib/Button';\r\nimport { NamespacesConsumer } from 'react-i18next';\r\n\r\nimport CountryCard from './CountryCard';\r\n\r\nclass CountryDetailsModal extends React.Component {\r\n\r\n  render() {\r\n    const { country, onHide } = this.props;\r\n    return (\r\n      <NamespacesConsumer>\r\n        {\r\n          t => (\r\n            <Modal\r\n              {...this.props}\r\n              size=\"md\"\r\n              aria-labelledby=\"contained-modal-title-vcenter\"\r\n              centered\r\n            >\r\n              <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">{t('dialog.title.details')}</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                {country && <CountryCard country={country} />}\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button onClick={onHide}>{t('dialog.button.close')}</Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          )\r\n        }\r\n      </NamespacesConsumer>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default CountryDetailsModal;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Container from 'react-bootstrap/lib/Container';\r\nimport Row from 'react-bootstrap/lib/Row';\r\nimport Col from 'react-bootstrap/lib/Col';\r\nimport Alert from 'react-bootstrap/lib/Alert';\r\nimport { NamespacesConsumer } from 'react-i18next';\r\n\r\nimport { fetchCountries, setSelectedCountry } from '../actions';\r\nimport CountrySidebar from './CountrySidebar';\r\nimport CountryMainView from './CountryMainView';\r\nimport CountryDetailsModal from './CountryDetailsModal';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    countries: state.countries.all,\r\n    filteredCountries: state.countries.filtered,\r\n    displayType: state.countries.displayType,\r\n    selectedCountry: state.countries.selectedCountry,\r\n    loading: state.countries.loading,\r\n    error: state.countries.error,\r\n    sortAndFilters: state.sortAndFilters\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchCountries: () => {\r\n      dispatch(fetchCountries())\r\n    },\r\n    setSelectedCountry: country => {\r\n      dispatch(setSelectedCountry(country))\r\n    }\r\n  };\r\n};\r\n\r\nclass Countries extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.props.fetchCountries();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      countries,\r\n      filteredCountries,\r\n      displayType,\r\n      selectedCountry,\r\n      loading,\r\n      error,\r\n      sortAndFilters,\r\n      setSelectedCountry\r\n    } = this.props;\r\n    return (\r\n      <NamespacesConsumer>\r\n        {\r\n          t => (       \r\n            <Container fluid as=\"section\" className=\"py-2\">\r\n            {error\r\n              ? <Alert variant=\"danger\">{error}</Alert> \r\n              : (loading \r\n                ? <Alert variant=\"info\">{t('content.message.dataLoading')}</Alert> \r\n                : <Row>\r\n                    <Col xs xl=\"2\" md=\"3\" className=\"bg-light\">\r\n                      <CountrySidebar/>\r\n                    </Col>\r\n                    <Col>\r\n                      <CountryMainView\r\n                        countries={countries}\r\n                        filteredCountries={filteredCountries}\r\n                        displayType={displayType}\r\n                        sortAndFilters={sortAndFilters}\r\n                        onCountrySelected={country => setSelectedCountry(country)}\r\n                      />\r\n                    </Col>\r\n                    <CountryDetailsModal\r\n                      show={!!selectedCountry}\r\n                      onHide={() => setSelectedCountry(null)}\r\n                      country={selectedCountry}\r\n                    />\r\n                  </Row>\r\n              )\r\n            }\r\n            </Container>\r\n          )\r\n        }\r\n      </NamespacesConsumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Countries);","import React from 'react';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nconst Footer = ({ t }) => {\r\n  return <footer className=\"bg-secondary p-3\">{t('footer.info')}</footer>;\r\n};\r\n\r\nexport default withNamespaces()(Footer);","import React from 'react';\r\nimport Navbar from 'react-bootstrap/lib/Navbar';\r\nimport Nav from 'react-bootstrap/lib/Nav';\r\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer';\r\nimport { NamespacesConsumer } from 'react-i18next';\r\n\r\nconst MainNavbar = () => {\r\n  return (\r\n    <NamespacesConsumer>\r\n      {\r\n        t => (\r\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\" sticky=\"top\">\r\n            <LinkContainer to=\"/countries\">      \r\n              <Navbar.Brand>{t('countries.title')}</Navbar.Brand>\r\n            </LinkContainer>          \r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <LinkContainer to=\"/settings\">   \r\n                  <Nav.Link>{t('settings.title')}</Nav.Link>\r\n                </LinkContainer>\r\n                <LinkContainer to=\"/about\">\r\n                  <Nav.Link>{t('about.title')}</Nav.Link>\r\n                </LinkContainer>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        )\r\n    }\r\n    </NamespacesConsumer>\r\n  );\r\n};\r\n\r\nexport default MainNavbar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from 'react-bootstrap/lib/Form';\r\nimport { withNamespaces } from 'react-i18next';\r\nimport i18next from 'i18next';\r\n\r\nimport { setSettingsUnit, SETTINGS_UNIT_TYPES } from \"../actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n  selectedUnit: state.settings.unit\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setSelectedUnit: unit => {\r\n    dispatch(setSettingsUnit(unit));\r\n  }\r\n});\r\n\r\nclass Settings extends React.Component {\r\n\r\n  onLanguageChange = e => {\r\n    const lang = e.target.value;\r\n    i18next.changeLanguage(lang);\r\n  };\r\n\r\n  onUnitChange = e => {\r\n    const selectedUnit = e.target.value;\r\n    this.props.setSelectedUnit(selectedUnit);\r\n  };\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    return (\r\n      <Form className=\"p-3\">\r\n        <Form.Group>\r\n          <Form.Label>{t('settings.label.language')}</Form.Label>\r\n          <Form.Control \r\n            as=\"select\" \r\n            onChange={this.onLanguageChange} \r\n            value={i18next.language}\r\n          >\r\n            <option value=\"en\">English</option>\r\n            <option value=\"fr\">Français</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>{t('settings.label.units')}</Form.Label>\r\n          <Form.Control \r\n            as=\"select\" \r\n            onChange={this.onUnitChange} \r\n            value={this.props.selectedUnit}\r\n          >\r\n            <option value={SETTINGS_UNIT_TYPES.METRIC}>{t('settings.units.metric')}</option>\r\n            <option value={SETTINGS_UNIT_TYPES.IMPERIAL}>{t('settings.units.imperial')}</option>\r\n          </Form.Control>\r\n        </Form.Group>        \r\n      </Form>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default withNamespaces()(connect(mapStateToProps, mapDispatchToProps)(Settings));","import React from 'react';\r\nimport Tabs from 'react-bootstrap/lib/Tabs';\r\nimport Tab from 'react-bootstrap/lib/Tab';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nconst About = function({ t }) {\r\n  return (\r\n    <section className=\"p-3\">\r\n      <Tabs defaultActiveKey=\"app\">\r\n        <Tab eventKey=\"app\" title={t('about.tab.app')}>\r\n          <article className=\"p-2\">\r\n            <p>\r\n              {t('about.app.part1')}\r\n              <a\r\n                href=\"https://github.com/vncntcltt/react-countries\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\">\r\n                GitHub\r\n              </a>\r\n            </p>\r\n            <p> {t('about.app.part2')}</p>\r\n            <p> {t('about.app.part3')}</p>\r\n          </article>\r\n        </Tab>\r\n        <Tab eventKey=\"tech\" title={t('about.tab.tech')}>\r\n          <article className=\"p-2\">\r\n            <ul>\r\n              <li>React\r\n                <ul>\r\n                  <li>create-react-app</li>\r\n                  <li>react-router</li>\r\n                  <li>react-redux</li>                  \r\n                  <li>react-bootstrap</li>\r\n                  <li>react-i18next</li>\r\n                </ul>\r\n              </li>\r\n              <li>Bootstrap</li>\r\n              <li>Leaflet</li>\r\n            </ul>\r\n          </article>\r\n        </Tab>\r\n        <Tab eventKey=\"data\" title={t('about.tab.data')}>\r\n          <article className=\"p-2\">\r\n            {t('about.data.countriesData')}\r\n            <a\r\n              href=\"https://restcountries.eu/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\">\r\n              REST Countries\r\n            </a>\r\n          </article>\r\n        </Tab>\r\n      </Tabs>      \r\n    </section>\r\n  );\r\n};\r\n\r\nexport default withNamespaces()(About);","import React from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\n\r\nimport Countries from './Countries';\r\nimport Footer from './Footer';\r\nimport Navbar from './Navbar';\r\nimport Settings from './Settings';\r\nimport About from './About';\r\n\r\nconst App = () => {\r\n  return (    \r\n      <>\r\n        <Navbar />\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/countries\" />\r\n          </Route>\r\n          <Route exact path=\"/countries\" component={Countries} />\r\n          <Route exact path=\"/settings\" component={Settings} />\r\n          <Route exact path=\"/about\" component={About} />\r\n        </Switch>\r\n\r\n        <Footer />\r\n      </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\n\r\nimport './i18n';\r\nimport { store, history } from './store';\r\nimport App from './components/App';\r\nimport './index.css';\r\n\r\nReactDOM.render((\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <App />\r\n    </ConnectedRouter>\r\n  </Provider>\r\n  ), \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}
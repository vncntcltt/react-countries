{"version":3,"sources":["i18n.js","reducers/index.js","api/countryApi.js","actions/countries.js","actions/filters.js","actions/settings.js","reducers/countries.js","reducers/filters.js","reducers/settings.js","store/index.js","components/common/SearchControl.js","components/common/SelectFilter.js","components/country/CountrySidebar.js","components/country/CountrySidebarContainer.js","components/country/CountryDisplayType.js","components/country/CountryDisplayTypeContainer.js","components/common/propTypes.js","components/country/CountryStatistics.js","components/common/UnitDisplay.js","components/common/UnitDisplayContainer.js","components/country/CountryCard.js","components/country/CountryGrid.js","components/country/CountryDataRow.js","components/country/CountryDatatable.js","components/country/CountryMap.js","components/country/CountryBreadcrumb.js","components/country/CountryBreadcrumbContainer.js","components/common/Paginated.js","components/country/CountryMainView.js","components/country/CountryDetailsModal.js","components/country/Countries.js","components/country/CountriesContainer.js","components/settings/Settings.js","components/settings/SettingsContainer.js","components/about/About.js","components/Footer.js","components/Navbar.js","components/App.js","serviceWorker.js","index.js"],"names":["i18n","use","reactI18nextModule","init","interpolation","escapeValue","lng","resources","en","translation","fr","keySeparator","history","DATA_STR_FIELDS","DATA_NUM_FIELDS","countryApi","fetch","then","res","ok","Error","concat","status","statusText","countries","regions","subregions","subregionsByRegion","regionalBlocBySize","regionalBlocs","languageBySize","languages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","country","value","region","subregion","includes","push","forEach","rb","regionalBlocName","name","Object","keys","sort","rb1","rb2","l","languageName","l1","l2","err","return","sortAndFilters","filteredCountries","filter","filterRegion","filterSubregion","filterRegionalBloc","find","filterLanguages","length","filterName","lname","toLowerCase","countryNameParts","split","map","part","trim","countryNameMatches","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","startsWith","sortField","sortOrder","a","b","localeCompare","COUNTRIES_DISPLAY_TYPES","filterCountriesByRegion","type","filterCountriesBySubregion","SETTINGS_UNIT_TYPES","initialCountriesState","all","filtered","displayType","selectedCountry","loading","error","state","arguments","action","objectSpread","initialSortAndFiltersState","initialSettingsState","unit","settings","createBrowserHistory","basename","process","store","createStore","combineReducers","router","connectRouter","composeWithDevTools","applyMiddleware","thunk","routerMiddleware","withNamespaces","_ref","t","onSearch","react_default","createElement","Form_default","Control","onChange","e","target","placeholder","className","SelectFilter","onFilterChange","_this","props","_this$props","this","values","selectedValue","label","addAll","Group","Label","as","val","key","React","Component","defaultProps","CountrySidebar","prevProps","filterAndSortCountries","Navbar_default","expand","Toggle","aria-controls","Collapse","id","SearchControl","filterCountriesByName","common_SelectFilter","filterCountriesByLanguages","regionalBloc","filterCountriesByRegionalBloc","Button_default","variant","onClick","resetFilters","connect","dispatch","filterAndSorts","setDisplayType","ButtonGroup_default","active","CountryDisplayType","languagePropType","shape","string","isRequired","currencyPropType","code","regionalBlocPropType","CountryStatistics","alpha3Code","capital","population","number","area","arrayOf","currencies","countriesCount","totalCountriesCount","countriesPct","Number","isInteger","toFixed","react_i18next_dist_es","count","UnitDisplay","selectedUnit","Math","round","propTypes","PropTypes","cardWidth","flag","countryLanguages","join","countryCurrencies","c","countryRegionalBlocs","cardStyles","width","Card_default","style","Header","Media_default","height","src","alt","Body","Title","Subtitle","ListGroup_default","Item","UnitDisplayContainer","CountryGrid","Container_default","fluid","Row_default","Col_default","xs","country_CountryCard","CountryDataRow","onCountrySelected","CountryDatatable","Fragment","Table_default","striped","bordered","hover","responsive","country_CountryDataRow","CountryMap","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","countriesLayer","countriesGeoJson","L","minZoom","setView","tileLayer","attribution","addTo","addCountriesLayer","_this2","hasLayer","remove","geoJSON","feature","toString","onEachFeature","layer","featureCountry","on","bindTooltip","bounds","getBounds","isValid","fitBounds","minWidth","minHeight","CountryBreadcrumb","onNavigateToWorld","onNavigateToRegion","Breadcrumb_default","Paginated","currentPage","onPageChange","page","setState","items","itemsPropName","itemsPerPage","children","pageCount","ceil","firstItemIndex","currentPageItems","slice","pages","_loop","Pagination_default","childrenWithCurrentPageItems","Children","child","cloneElement","defineProperty","paginatedChild","Array","isArray","only","First","Prev","Next","Last","CountryMainView","CountryBreadcrumbContainer","CountryDisplayTypeContainer","country_CountryStatistics","Paginated_Paginated","country_CountryGrid","country_CountryDatatable","country_CountryMap","console","renderCountries","onHide","restProps","objectWithoutProperties","Modal_default","assign","size","aria-labelledby","centered","closeButton","Footer","Countries","fetchCountries","setSelectedCountry","Alert_default","sm","lg","CountrySidebarContainer","country_CountryMainView","country_CountryDetailsModal","show","json","regionData","catch","fetchCountriesFailure","message","Settings","onLanguageChange","lang","i18next","changeLanguage","onUnitChange","setSelectedUnit","language","setSettingsUnit","Tabs_default","defaultActiveKey","Tab_default","eventKey","title","href","rel","MainNavbar","bg","sticky","LinkContainer_default","to","Brand","Nav_default","Link","App","components_Navbar","Switch","Route","exact","path","Redirect","component","CountriesContainer","SettingsContainer","About","components_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","ReactDOM","render","es","lib","components_App","react_toastify_lib","position","toast","POSITION","BOTTOM_RIGHT","document","getElementById","URL","origin","addEventListener","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","warn","info"],"mappings":"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","file":"static/js/main.73e9fd2e.chunk.js","sourcesContent":["import i18n from 'i18next'\nimport { reactI18nextModule } from 'react-i18next'\nimport en from './translations/en'\nimport fr from './translations/fr'\n\ni18n.use(reactI18nextModule).init({\n  interpolation: {\n    escapeValue: false\n  },\n  lng: 'en',\n  resources: {\n    en: {\n      translation: en\n    },\n    fr: {\n      translation: fr\n    }\n  },\n  keySeparator: '#####'\n})\n\nexport default i18n\n","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\nimport countries from './countries'\nimport sortAndFilters from './filters'\nimport settings from './settings'\n\nexport default history =>\n  combineReducers({\n    router: connectRouter(history),\n    countries,\n    sortAndFilters,\n    settings\n  })\n","const COUNTRIES_API_URL = 'https://restcountries.eu/rest/v2/all'\nconst ASC_ORDER = 'asc'\nconst DATA_STR_FIELDS = ['name']\nconst DATA_NUM_FIELDS = ['population', 'area']\nconst DATA_LOCALE = 'en'\n\nexport default {\n  getCountries() {\n    return fetch(COUNTRIES_API_URL).then(res => {\n      if (!res.ok) {\n        throw new Error(`Could not fetch countries: error ${res.status} ${res.statusText}`)\n      }\n      return res\n    })\n  },\n\n  buildRegionData(countries) {\n    const regions = []\n    const subregions = []\n    const subregionsByRegion = {}\n    const regionalBlocBySize = {}\n    let regionalBlocs = []\n    const languageBySize = {}\n    let languages = []\n    for (let country of countries) {\n      let { region, subregion } = country\n      if (region && !regions.includes(region)) {\n        regions.push(region)\n      }\n      if (subregionsByRegion[region] === undefined) {\n        subregionsByRegion[region] = []\n      }\n      if (subregion && !subregions.includes(subregion)) {\n        subregions.push(subregion)\n        if (!subregionsByRegion[region].includes(subregion)) {\n          subregionsByRegion[region].push(subregion)\n        }\n      }\n      country.regionalBlocs.forEach(rb => {\n        let regionalBlocName = rb.name\n        if (!regionalBlocBySize[regionalBlocName]) {\n          regionalBlocBySize[regionalBlocName] = 1\n        } else {\n          regionalBlocBySize[regionalBlocName]++\n        }\n      })\n      regionalBlocs = Object.keys(regionalBlocBySize)\n      regionalBlocs.sort((rb1, rb2) => regionalBlocBySize[rb2] - regionalBlocBySize[rb1])\n      country.languages.forEach(l => {\n        let languageName = l.name\n        if (!languageBySize[languageName]) {\n          languageBySize[languageName] = 1\n        } else {\n          languageBySize[languageName]++\n        }\n      })\n      languages = Object.keys(languageBySize)\n      languages.sort((l1, l2) => languageBySize[l2] - languageBySize[l1])\n    }\n    return {\n      regions,\n      subregions,\n      subregionsByRegion,\n      regionalBlocs,\n      languages\n    }\n  },\n\n  filterAndSortCountries(countries, sortAndFilters) {\n    const filteredCountries = countries.filter(country => {\n      if (sortAndFilters.filterRegion && country.region !== sortAndFilters.filterRegion) {\n        return false\n      }\n      if (sortAndFilters.filterSubregion && country.subregion !== sortAndFilters.filterSubregion) {\n        return false\n      }\n      if (\n        sortAndFilters.filterRegionalBloc &&\n        !country.regionalBlocs.find(rb => rb.name === sortAndFilters.filterRegionalBloc)\n      ) {\n        return false\n      }\n      if (\n        sortAndFilters.filterLanguages &&\n        sortAndFilters.filterLanguages.length &&\n        !country.languages.find(l => sortAndFilters.filterLanguages.includes(l.name))\n      ) {\n        return false\n      }\n      if (sortAndFilters.filterName) {\n        const lname = sortAndFilters.filterName.toLowerCase()\n        let countryNameParts = country.name\n          .toLowerCase()\n          .split(/,|'| /)\n          .map(part => part.trim())\n        let countryNameMatches = false\n        for (let part of countryNameParts.filter(part => part.length > 3)) {\n          if (part.startsWith(lname)) {\n            countryNameMatches = true\n            break\n          }\n        }\n        if (!countryNameMatches) {\n          return false\n        }\n      }\n      return true\n    })\n\n    if (sortAndFilters.sortField && sortAndFilters.sortOrder) {\n      filteredCountries.sort((a, b) => {\n        let res = 1\n        if (DATA_STR_FIELDS.includes(sortAndFilters.sortField)) {\n          res = a[sortAndFilters.sortField].localeCompare(b[sortAndFilters.sortField], DATA_LOCALE)\n        } else if (DATA_NUM_FIELDS.includes(sortAndFilters.sortField)) {\n          res = a[sortAndFilters.sortField] - b[sortAndFilters.sortField]\n        }\n        return sortAndFilters.sortOrder === ASC_ORDER ? res : -res\n      })\n    }\n\n    return filteredCountries\n  }\n}\n","import countryApi from '../api/countryApi'\n\nexport const FETCH_COUNTRIES_REQUEST = 'FETCH_COUNTRIES_REQUEST'\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS'\nexport const FETCH_COUNTRIES_FAILURE = 'FETCH_COUNTRIES_FAILURE'\nexport const SET_COUNTRIES_DISPLAY_TYPE = 'SET_COUNTRIES_DISPLAY_TYPE'\nexport const FILTER_AND_SORT_COUNTRIES = 'FILTER_AND_SORT_COUNTRIES'\nexport const SET_SELECTED_COUNTRY = 'SET_SELECTED_COUNTRY'\n\nexport const COUNTRIES_DISPLAY_TYPES = {\n  MAP: 'map',\n  GRID: 'grid',\n  TABLE: 'table'\n}\n\nexport const fetchCountriesRequest = () => ({\n  type: FETCH_COUNTRIES_REQUEST\n})\n\nexport const fetchCountriesSuccess = ({ countries, regions, subregions, languages, regionalBlocs }) => ({\n  type: FETCH_COUNTRIES_SUCCESS,\n  countries,\n  regions,\n  subregions,\n  languages,\n  regionalBlocs\n})\n\nexport const fetchCountriesFailure = error => ({\n  type: FETCH_COUNTRIES_FAILURE,\n  error\n})\n\nexport const fetchCountries = () => {\n  return dispatch => {\n    dispatch(fetchCountriesRequest())\n    countryApi\n      .getCountries()\n      .then(res => res.json())\n      .then(countries => {\n        const regionData = countryApi.buildRegionData(countries)\n        dispatch(fetchCountriesSuccess({ countries, ...regionData }))\n      })\n      .catch(error => {\n        dispatch(fetchCountriesFailure(error.message))\n      })\n  }\n}\n\nexport const filterAndSortCountries = (countries, filterAndSorts) => {\n  const filteredCountries = countryApi.filterAndSortCountries(countries, filterAndSorts)\n  return {\n    type: FILTER_AND_SORT_COUNTRIES,\n    filteredCountries\n  }\n}\n\nexport const setCountryDisplayType = displayType => ({\n  type: SET_COUNTRIES_DISPLAY_TYPE,\n  displayType\n})\n\nexport const setSelectedCountry = country => ({\n  type: SET_SELECTED_COUNTRY,\n  country\n})\n","export const FILTER_COUNTRIES_BY_REGION = 'FILTER_COUNTRIES_BY_REGION'\nexport const FILTER_COUNTRIES_BY_SUBREGION = 'FILTER_COUNTRIES_BY_SUBREGION'\nexport const FILTER_COUNTRIES_BY_REGIONAL_BLOC = 'FILTER_COUNTRIES_BY_REGIONAL_BLOC'\nexport const FILTER_COUNTRIES_BY_LANGUAGES = 'FILTER_COUNTRIES_BY_LANGUAGES'\nexport const FILTER_COUNTRIES_BY_NAME = 'FILTER_COUNTRIES_BY_NAME'\nexport const RESET_FILTERS = 'RESET_FILTERS'\n\nexport const filterCountriesByRegion = filterRegion => ({\n  type: FILTER_COUNTRIES_BY_REGION,\n  filterRegion\n})\n\nexport const filterCountriesBySubregion = filterSubregion => ({\n  type: FILTER_COUNTRIES_BY_SUBREGION,\n  filterSubregion\n})\n\nexport const filterCountriesByRegionalBloc = filterRegionalBloc => ({\n  type: FILTER_COUNTRIES_BY_REGIONAL_BLOC,\n  filterRegionalBloc\n})\n\nexport const filterCountriesByLanguages = filterLanguages => ({\n  type: FILTER_COUNTRIES_BY_LANGUAGES,\n  filterLanguages\n})\n\nexport const filterCountriesByName = filterName => ({\n  type: FILTER_COUNTRIES_BY_NAME,\n  filterName\n})\n\nexport const resetFilters = () => ({\n  type: RESET_FILTERS\n})\n","export const SET_SETTINGS_UNIT = 'SET_SETTINGS_UNIT'\n\nexport const SETTINGS_UNIT_TYPES = {\n  METRIC: 'metric',\n  IMPERIAL: 'imperial'\n}\n\nexport const setSettingsUnit = unit => ({\n  type: SET_SETTINGS_UNIT,\n  unit\n})\n","import {\n  SET_COUNTRIES_DISPLAY_TYPE,\n  COUNTRIES_DISPLAY_TYPES,\n  FILTER_AND_SORT_COUNTRIES,\n  FETCH_COUNTRIES_REQUEST,\n  FETCH_COUNTRIES_SUCCESS,\n  FETCH_COUNTRIES_FAILURE,\n  SET_SELECTED_COUNTRY\n} from '../actions'\n\nconst initialCountriesState = {\n  all: [],\n  filtered: [],\n  regions: [],\n  subregions: [],\n  languages: [],\n  regionalBlocs: [],\n  displayType: COUNTRIES_DISPLAY_TYPES.MAP,\n  selectedCountry: null,\n  loading: null,\n  error: null\n}\n\nconst countries = (state = initialCountriesState, action) => {\n  switch (action.type) {\n    case FETCH_COUNTRIES_REQUEST:\n      return { ...state, loading: true, error: null }\n    case FETCH_COUNTRIES_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        all: action.countries,\n        filtered: action.countries,\n        regions: action.regions,\n        subregions: action.subregions,\n        languages: action.languages,\n        regionalBlocs: action.regionalBlocs\n      }\n    case FETCH_COUNTRIES_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      }\n    case SET_COUNTRIES_DISPLAY_TYPE:\n      return { ...state, displayType: action.displayType }\n    case FILTER_AND_SORT_COUNTRIES:\n      return { ...state, filtered: action.filteredCountries }\n    case SET_SELECTED_COUNTRY:\n      return { ...state, selectedCountry: action.country }\n    default:\n      return state\n  }\n}\n\nexport default countries\n","import {\n  FILTER_COUNTRIES_BY_REGION,\n  FILTER_COUNTRIES_BY_REGIONAL_BLOC,\n  FILTER_COUNTRIES_BY_SUBREGION,\n  FILTER_COUNTRIES_BY_LANGUAGES,\n  FILTER_COUNTRIES_BY_NAME,\n  RESET_FILTERS\n} from '../actions'\n\nconst initialSortAndFiltersState = {\n  filterRegion: '',\n  filterSubregion: '',\n  filterRegionalBloc: '',\n  filterLanguages: '',\n  filterName: ''\n}\n\nconst sortAndFilters = (state = initialSortAndFiltersState, action) => {\n  switch (action.type) {\n    case FILTER_COUNTRIES_BY_REGION:\n      return {\n        ...state,\n        filterRegion: action.filterRegion,\n        filterSubregion: ''\n      }\n    case FILTER_COUNTRIES_BY_SUBREGION:\n      return { ...state, filterSubregion: action.filterSubregion }\n    case FILTER_COUNTRIES_BY_REGIONAL_BLOC:\n      return { ...state, filterRegionalBloc: action.filterRegionalBloc }\n    case FILTER_COUNTRIES_BY_LANGUAGES:\n      return { ...state, filterLanguages: action.filterLanguages }\n    case FILTER_COUNTRIES_BY_NAME:\n      return { ...state, filterName: action.filterName }\n    case RESET_FILTERS:\n      return { ...state, ...initialSortAndFiltersState }\n    default:\n      return state\n  }\n}\n\nexport default sortAndFilters\n","import { SET_SETTINGS_UNIT, SETTINGS_UNIT_TYPES } from '../actions'\n\nconst initialSettingsState = {\n  unit: SETTINGS_UNIT_TYPES.METRIC\n}\n\nconst settings = (state = initialSettingsState, action) => {\n  switch (action.type) {\n    case SET_SETTINGS_UNIT:\n      return { ...state, unit: action.unit }\n    default:\n      return state\n  }\n}\n\nexport default settings\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport createBrowserHistory from 'history/createBrowserHistory'\nimport { routerMiddleware } from 'connected-react-router'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport createRootReducer from '../reducers/index'\n\nexport const history = createBrowserHistory({\n  basename: process.env.PUBLIC_URL\n})\nexport const store = createStore(\n  createRootReducer(history),\n  composeWithDevTools(applyMiddleware(thunk, routerMiddleware(history)))\n)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Form from 'react-bootstrap/lib/Form'\nimport { withNamespaces } from 'react-i18next'\n\nconst CountrySearch = ({ t, value, onSearch }) => (\n  <Form.Control\n    value={value}\n    onChange={e => onSearch(e.target.value)}\n    placeholder={t('toolbar.label.search')}\n    className=\"mb-3\"\n  />\n)\n\nCountrySearch.propTypes = {\n  t: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  onSearch: PropTypes.func.isRequired\n}\n\nexport default withNamespaces()(CountrySearch)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Form from 'react-bootstrap/lib/Form'\nimport { withNamespaces } from 'react-i18next'\n\nclass SelectFilter extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    values: PropTypes.array.isRequired,\n    selectedValue: PropTypes.string.isRequired,\n    onFilterChange: PropTypes.func.isRequired,\n    label: PropTypes.string,\n    addAll: PropTypes.bool\n  }\n\n  static defaultProps = {\n    label: '',\n    addAll: false\n  }\n\n  onFilterChange = e => {\n    this.props.onFilterChange(e.target.value)\n  }\n\n  render() {\n    const { t, values, selectedValue, label, addAll } = this.props\n    return (\n      <Form.Group>\n        <Form.Label>{label}</Form.Label>\n        <Form.Control as=\"select\" value={selectedValue} onChange={this.onFilterChange}>\n          {addAll ? <option value=\"\">{t('filters.placeholder.all')}</option> : ''}\n          {values.map(val => (\n            <option key={val} value={val}>\n              {val}\n            </option>\n          ))}\n        </Form.Control>\n      </Form.Group>\n    )\n  }\n}\n\nexport default withNamespaces()(SelectFilter)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Form from 'react-bootstrap/lib/Form'\nimport Button from 'react-bootstrap/lib/Button'\nimport Navbar from 'react-bootstrap/lib/Navbar'\nimport { withNamespaces } from 'react-i18next'\n\nimport SearchControl from '../common/SearchControl'\nimport SelectFilter from '../common/SelectFilter'\n\nclass CountrySidebar extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    countries: PropTypes.array.isRequired,\n    regions: PropTypes.arrayOf(PropTypes.string).isRequired,\n    subregions: PropTypes.arrayOf(PropTypes.string).isRequired,\n    languages: PropTypes.arrayOf(PropTypes.string).isRequired,\n    regionalBlocs: PropTypes.arrayOf(PropTypes.string).isRequired,\n    sortAndFilters: PropTypes.object.isRequired,\n    filterAndSortCountries: PropTypes.func.isRequired,\n    filterCountriesByRegion: PropTypes.func.isRequired,\n    filterCountriesBySubregion: PropTypes.func.isRequired,\n    filterCountriesByRegionalBloc: PropTypes.func.isRequired,\n    filterCountriesByLanguages: PropTypes.func.isRequired,\n    filterCountriesByName: PropTypes.func.isRequired,\n    resetFilters: PropTypes.func.isRequired\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.sortAndFilters !== this.props.sortAndFilters) {\n      this.props.filterAndSortCountries(this.props.countries, this.props.sortAndFilters)\n    }\n  }\n\n  render() {\n    const { t } = this.props\n    return (\n      <aside>\n        <Navbar expand=\"md\" className=\"px-0\">\n          <Navbar.Toggle aria-controls=\"responsive-sidebar\">\n            <span className=\"navbar-toggler-icon\" />\n            <span className=\"px-2\">{t('filters.header')}</span>\n          </Navbar.Toggle>\n          <Navbar.Collapse id=\"responsive-sidebar\">\n            <Form className=\"py-3\">\n              <SearchControl\n                value={this.props.sortAndFilters.filterName}\n                onSearch={name => this.props.filterCountriesByName(name)}\n              />\n\n              <SelectFilter\n                label={t('filters.label.region')}\n                values={this.props.regions}\n                selectedValue={this.props.sortAndFilters.filterRegion}\n                onFilterChange={region => this.props.filterCountriesByRegion(region)}\n                addAll\n              />\n\n              <SelectFilter\n                label={t('filters.label.subregion')}\n                values={this.props.subregions}\n                selectedValue={this.props.sortAndFilters.filterSubregion}\n                onFilterChange={subregion => this.props.filterCountriesBySubregion(subregion)}\n                addAll\n              />\n\n              <SelectFilter\n                label={t('filters.label.languages')}\n                values={this.props.languages}\n                selectedValue={this.props.sortAndFilters.filterLanguages}\n                onFilterChange={languages => this.props.filterCountriesByLanguages(languages)}\n                addAll\n              />\n\n              <SelectFilter\n                label={t('filters.label.regionalBloc')}\n                values={this.props.regionalBlocs}\n                selectedValue={this.props.sortAndFilters.filterRegionalBloc}\n                onFilterChange={regionalBloc => this.props.filterCountriesByRegionalBloc(regionalBloc)}\n                addAll\n              />\n\n              <Button variant=\"primary\" onClick={this.props.resetFilters} className=\"my-2\">\n                {t('filters.button.reset')}\n              </Button>\n            </Form>\n          </Navbar.Collapse>\n        </Navbar>\n      </aside>\n    )\n  }\n}\n\nexport default withNamespaces()(CountrySidebar)\n","import { connect } from 'react-redux'\n\nimport CountrySidebar from './CountrySidebar'\n\nimport {\n  filterAndSortCountries,\n  filterCountriesByRegion,\n  filterCountriesBySubregion,\n  filterCountriesByRegionalBloc,\n  filterCountriesByLanguages,\n  filterCountriesByName,\n  resetFilters\n} from '../../actions'\n\nconst mapStateToProps = state => {\n  return {\n    countries: state.countries.all,\n    regions: state.countries.regions,\n    subregions: state.countries.subregions,\n    languages: state.countries.languages,\n    regionalBlocs: state.countries.regionalBlocs,\n    sortAndFilters: state.sortAndFilters\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    filterAndSortCountries: (countries, sortAndFilters) => {\n      dispatch(filterAndSortCountries(countries, sortAndFilters))\n    },\n    filterCountriesByRegion: region => {\n      dispatch(filterCountriesByRegion(region))\n    },\n    filterCountriesBySubregion: subregion => {\n      dispatch(filterCountriesBySubregion(subregion))\n    },\n    filterCountriesByRegionalBloc: regionalBloc => {\n      dispatch(filterCountriesByRegionalBloc(regionalBloc))\n    },\n    filterCountriesByLanguages: languages => {\n      dispatch(filterCountriesByLanguages(languages))\n    },\n    filterCountriesByName: name => {\n      dispatch(filterCountriesByName(name))\n    },\n    resetFilters: () => {\n      dispatch(resetFilters())\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CountrySidebar)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from 'react-bootstrap/lib/Button'\nimport ButtonGroup from 'react-bootstrap/lib/ButtonGroup'\nimport { withNamespaces } from 'react-i18next'\n\nimport { COUNTRIES_DISPLAY_TYPES } from '../../actions'\n\nconst CountryDisplayType = ({ t, displayType, setDisplayType }) => (\n  <ButtonGroup className=\"mb-3\">\n    <Button\n      value={COUNTRIES_DISPLAY_TYPES.MAP}\n      active={displayType === COUNTRIES_DISPLAY_TYPES.MAP}\n      onClick={setDisplayType}\n    >\n      {t('countries.toolbar.map')}\n    </Button>\n    <Button\n      value={COUNTRIES_DISPLAY_TYPES.GRID}\n      active={displayType === COUNTRIES_DISPLAY_TYPES.GRID}\n      onClick={setDisplayType}\n    >\n      {t('countries.toolbar.grid')}\n    </Button>\n    <Button\n      value={COUNTRIES_DISPLAY_TYPES.TABLE}\n      active={displayType === COUNTRIES_DISPLAY_TYPES.TABLE}\n      onClick={setDisplayType}\n    >\n      {t('countries.toolbar.table')}\n    </Button>\n  </ButtonGroup>\n)\n\nCountryDisplayType.propTypes = {\n  t: PropTypes.func.isRequired,\n  displayType: PropTypes.string.isRequired,\n  setDisplayType: PropTypes.func.isRequired\n}\n\nexport default withNamespaces()(CountryDisplayType)\n","import { connect } from 'react-redux'\n\nimport { setCountryDisplayType } from '../../actions'\nimport CountryDisplayType from './CountryDisplayType'\n\nconst mapStateToProps = state => {\n  return {\n    displayType: state.countries.displayType\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDisplayType: e => {\n      dispatch(setCountryDisplayType(e.target.value))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CountryDisplayType)\n","import { shape, string, number, arrayOf } from 'prop-types'\n\nexport const languagePropType = shape({\n  name: string.isRequired\n})\n\nexport const currencyPropType = shape({\n  name: string,\n  code: string\n})\n\nexport const regionalBlocPropType = shape({\n  name: string.isRequired\n})\n\nexport const countryPropType = shape({\n  name: string.isRequired,\n  alpha3Code: string.isRequired,\n  capital: string,\n  region: string,\n  subregion: string,\n  population: number,\n  area: number,\n  languages: arrayOf(languagePropType),\n  currencies: arrayOf(currencyPropType),\n  regionalBlocs: arrayOf(regionalBlocPropType)\n})\n\nexport const sortAndFilterPropType = shape({\n  filterRegion: string.isRequired,\n  filterSubregion: string.isRequired,\n  filterRegionalBloc: string.isRequired,\n  filterLanguages: string.isRequired,\n  filterName: string.isRequired\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { NamespacesConsumer } from 'react-i18next'\n\nimport { countryPropType } from '../common/propTypes'\n\nconst displayPct = function(val) {\n  if (Number.isInteger(val)) {\n    return val + '%'\n  } else {\n    return val.toFixed(2) + '%'\n  }\n}\n\nconst CountryStatistics = ({ countries, filteredCountries }) => {\n  const countriesCount = filteredCountries.length\n  const totalCountriesCount = countries.length\n  const countriesPct = displayPct((countriesCount / totalCountriesCount) * 100)\n  return (\n    <NamespacesConsumer>\n      {t => (\n        <div className=\"float-lg-right py-2\">\n          <span>\n            {countriesCount} {t('statistics.text.countries', { count: countriesCount })}\n          </span>\n          <span className=\"text-muted px-1\">\n            {' '}\n            ({countriesPct} {t('statistics.subtext.worldCountries')})\n          </span>\n        </div>\n      )}\n    </NamespacesConsumer>\n  )\n}\n\nCountryStatistics.propTypes = {\n  countries: PropTypes.arrayOf(countryPropType).isRequired,\n  filteredCountries: PropTypes.arrayOf(countryPropType).isRequired\n}\n\nexport default CountryStatistics\n","import PropTypes from 'prop-types'\n\nimport { SETTINGS_UNIT_TYPES } from '../../actions'\n\nconst UnitDisplay = ({ value, selectedUnit }) => {\n  let val = value\n  if (selectedUnit === SETTINGS_UNIT_TYPES.IMPERIAL) {\n    val = Math.round(val / 2, 59) + ' sq mi'\n  } else {\n    val = val + ' km²'\n  }\n  return val\n}\n\nUnitDisplay.propTypes = {\n  value: PropTypes.number.isRequired,\n  selectedUnit: PropTypes.string.isRequired\n}\n\nexport default UnitDisplay\n","import { connect } from 'react-redux'\n\nimport UnitDisplay from './UnitDisplay'\n\nconst mapStateToProps = state => ({\n  selectedUnit: state.settings.unit\n})\n\nexport default connect(mapStateToProps)(UnitDisplay)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Card from 'react-bootstrap/lib/Card'\nimport ListGroup from 'react-bootstrap/lib/ListGroup'\nimport Media from 'react-bootstrap/lib/Media'\nimport { withNamespaces } from 'react-i18next'\n\nimport UnitDisplayContainer from '../common/UnitDisplayContainer'\nimport { countryPropType } from '../common/propTypes'\n\nconst CountryCard = ({ t, country, cardWidth }) => {\n  const {\n    name,\n    alpha3Code,\n    region,\n    subregion,\n    capital,\n    population,\n    area,\n    languages,\n    currencies,\n    regionalBlocs,\n    flag\n  } = country\n  const countryLanguages = languages.map(l => l.name).join(', ')\n  const countryCurrencies = currencies.map(c => `${c.name} (${c.code})`).join(', ')\n  const countryRegionalBlocs = regionalBlocs.map(rb => rb.name).join(', ')\n  const cardStyles = cardWidth ? { width: cardWidth } : {}\n  return (\n    <Card style={cardStyles}>\n      <Card.Header>\n        <Media>\n          <img height={64} className=\"mr-3\" src={flag} alt=\"Country flag\" />\n          <Media.Body>\n            <Card.Title>\n              {name} ({alpha3Code})\n            </Card.Title>\n            <Card.Subtitle className=\"mb-2 text-muted\">\n              {region} {subregion && '/ ' + subregion}\n            </Card.Subtitle>\n          </Media.Body>\n        </Media>\n      </Card.Header>\n      <Card.Body>\n        <ListGroup variant=\"flush\">\n          <ListGroup.Item className=\"text-truncate\">\n            <span className=\"text-muted pr-2\">{t('country.label.capital')}</span>\n            {capital}\n          </ListGroup.Item>\n          <ListGroup.Item className=\"text-truncate\">\n            <span className=\"text-muted pr-2\">\n              {t('country.label.regionalBlocs', {\n                count: regionalBlocs.length\n              })}\n            </span>\n            {countryRegionalBlocs}\n          </ListGroup.Item>\n          <ListGroup.Item className=\"text-truncate\">\n            <span className=\"text-muted pr-2\">{t('country.label.population')}</span>\n            {population}\n          </ListGroup.Item>\n          <ListGroup.Item className=\"text-truncate\">\n            <span className=\"text-muted pr-2\">{t('country.label.area')}</span>\n            <UnitDisplayContainer value={area} />\n          </ListGroup.Item>\n          <ListGroup.Item className=\"text-truncate\">\n            <span className=\"text-muted pr-2\">{t('country.label.languages', { count: languages.length })}</span>\n            {countryLanguages}\n          </ListGroup.Item>\n          <ListGroup.Item className=\"text-truncate\">\n            <span className=\"text-muted pr-2\">{t('country.label.currencies', { count: currencies.length })}</span>\n            {countryCurrencies}\n          </ListGroup.Item>\n        </ListGroup>\n      </Card.Body>\n    </Card>\n  )\n}\n\nCountryCard.propTypes = {\n  t: PropTypes.func.isRequired,\n  country: countryPropType.isRequired,\n  cardWidth: PropTypes.number\n}\n\nexport default withNamespaces()(CountryCard)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Container from 'react-bootstrap/lib/Container'\nimport Row from 'react-bootstrap/lib/Row'\nimport Col from 'react-bootstrap/lib/Col'\n\nimport CountryCard from './CountryCard'\nimport { countryPropType } from '../common/propTypes'\n\nconst CountryGrid = ({ countries }) => (\n  <Container fluid>\n    <Row>\n      {countries.map(country => (\n        <Col key={country.alpha3Code} xs=\"auto\" className=\"mb-3\">\n          <CountryCard country={country} cardWidth={400} />\n        </Col>\n      ))}\n    </Row>\n  </Container>\n)\n\nCountryGrid.propTypes = {\n  countries: PropTypes.arrayOf(countryPropType)\n}\n\nexport default CountryGrid\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport UnitDisplayContainer from '../common/UnitDisplayContainer'\nimport { countryPropType } from '../common/propTypes'\n\nconst CountryDataRow = ({ country, onCountrySelected }) => {\n  const { name, alpha3Code, capital, region, subregion, population, area } = country\n  return (\n    <tr onClick={() => onCountrySelected(country)}>\n      <td>{name}</td>\n      <td>{alpha3Code}</td>\n      <td>{capital}</td>\n      <td>{region}</td>\n      <td>{subregion}</td>\n      <td>{population}</td>\n      <td>\n        <UnitDisplayContainer value={area} />\n      </td>\n    </tr>\n  )\n}\n\nCountryDataRow.propTypes = {\n  country: countryPropType.isRequired,\n  onCountrySelected: PropTypes.func.isRequired\n}\n\nexport default CountryDataRow\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Table from 'react-bootstrap/lib/Table'\nimport { withNamespaces } from 'react-i18next'\n\nimport CountryDataRow from './CountryDataRow'\n\nclass CountryDatatable extends React.Component {\n  render() {\n    const { t, countries, onCountrySelected } = this.props\n    return (\n      <>\n        <Table striped bordered hover responsive>\n          <thead>\n            <tr>\n              <th>{t('country.label.name')}</th>\n              <th>{t('country.label.code')}</th>\n              <th>{t('country.label.capital')}</th>\n              <th>{t('country.label.region')}</th>\n              <th>{t('country.label.subregion')}</th>\n              <th>{t('country.label.population')}</th>\n              <th>{t('country.label.area')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {countries.map(country => (\n              <CountryDataRow\n                key={country.alpha3Code}\n                country={country}\n                onCountrySelected={country => onCountrySelected(country)}\n              />\n            ))}\n          </tbody>\n        </Table>\n      </>\n    )\n  }\n}\n\nCountryDatatable.propTypes = {\n  t: PropTypes.func.isRequired,\n  countries: PropTypes.array.isRequired,\n  onCountrySelected: PropTypes.func.isRequired\n}\n\nexport default withNamespaces()(CountryDatatable)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport L from 'leaflet'\nimport 'leaflet/dist/leaflet.css'\n\nimport countriesGeoJson from '../../assets/countries.geo.json'\nimport { countryPropType } from '../common/propTypes'\n\nclass CountryMap extends React.Component {\n  static propTypes = {\n    countries: PropTypes.arrayOf(countryPropType),\n    onCountrySelected: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n    this.map = null\n    this.countriesLayer = null\n    this.countriesGeoJson = countriesGeoJson\n  }\n\n  componentDidMount() {\n    this.map = L.map('map', { minZoom: 2 }).setView([0, 0], 2)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map)\n    if (this.props.countries) {\n      this.addCountriesLayer()\n    }\n  }\n\n  componentDidUpdate() {\n    this.addCountriesLayer()\n  }\n\n  addCountriesLayer() {\n    if (this.map.hasLayer(this.countriesLayer)) {\n      this.countriesLayer.remove()\n    }\n    this.countriesLayer = L.geoJSON(this.countriesGeoJson, {\n      filter: feature => {\n        const countryIds = this.props.countries.map(c => c.alpha3Code)\n        return countryIds.includes(feature.id.toString())\n      },\n      onEachFeature: (feature, layer) => {\n        const featureCountry = this.props.countries.find(country => country.alpha3Code === feature.id)\n        layer.on('click', e => {\n          if (featureCountry) {\n            this.props.onCountrySelected(featureCountry)\n          }\n        })\n        layer.bindTooltip('<strong>' + featureCountry.name + '</strong>')\n      }\n    })\n    this.countriesLayer.addTo(this.map)\n    let bounds = this.countriesLayer.getBounds()\n    if (bounds.isValid()) {\n      this.map.fitBounds(bounds)\n    } else {\n      this.map.setView([0, 0], 2)\n    }\n  }\n\n  render() {\n    const mapStyle = { width: '100%', minWidth: 380, minHeight: 760 }\n    return <div id=\"map\" style={mapStyle} />\n  }\n}\n\nexport default CountryMap\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Breadcrumb from 'react-bootstrap/lib/Breadcrumb'\nimport { withNamespaces } from 'react-i18next'\n\nclass CountryBreadcrumb extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    region: PropTypes.string,\n    subregion: PropTypes.string,\n    onNavigateToWorld: PropTypes.func,\n    onNavigateToRegion: PropTypes.func\n  }\n\n  static defaultProps = {\n    onNavigateToWorld: () => {},\n    onNavigateToRegion: () => {}\n  }\n\n  render() {\n    const { t, region, subregion, onNavigateToWorld, onNavigateToRegion } = this.props\n    return (\n      <Breadcrumb>\n        <Breadcrumb.Item active={!region && !subregion} onClick={onNavigateToWorld}>\n          {t('navigation.label.world')}\n        </Breadcrumb.Item>\n        {region && (\n          <Breadcrumb.Item active={!subregion} onClick={onNavigateToRegion}>\n            {region}\n          </Breadcrumb.Item>\n        )}\n        {region && subregion && <Breadcrumb.Item active>{subregion}</Breadcrumb.Item>}\n      </Breadcrumb>\n    )\n  }\n}\n\nexport default withNamespaces()(CountryBreadcrumb)\n","import { connect } from 'react-redux'\n\nimport { filterCountriesByRegion, filterCountriesBySubregion } from '../../actions'\nimport CountryBreadcrumb from './CountryBreadcrumb'\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onNavigateToWorld: () => {\n      dispatch(filterCountriesByRegion(''))\n    },\n    onNavigateToRegion: () => {\n      dispatch(filterCountriesBySubregion(''))\n    }\n  }\n}\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(CountryBreadcrumb)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Pagination from 'react-bootstrap/lib/Pagination'\n\nexport default class Paginated extends React.Component {\n  static propTypes = {\n    items: PropTypes.array.isRequired,\n    itemsPropName: PropTypes.string.isRequired,\n    itemsPerPage: PropTypes.number,\n    children: PropTypes.element.isRequired\n  }\n\n  static defaultProps = {\n    itemsPerPage: 10\n  }\n\n  state = {\n    currentPage: 1\n  }\n\n  onPageChange = page => {\n    this.setState({ currentPage: page })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.items !== this.props.items) {\n      this.setState({ currentPage: 1 })\n    }\n  }\n\n  render() {\n    const { items, itemsPropName, itemsPerPage, children } = this.props\n    const pageCount = Math.ceil(items.length / itemsPerPage)\n    const firstItemIndex = (this.state.currentPage - 1) * itemsPerPage\n    const currentPageItems = items.slice(firstItemIndex, firstItemIndex + itemsPerPage)\n    const pages = []\n    for (let page = 1; page <= pageCount; page++) {\n      pages.push(\n        <Pagination.Item key={page} active={this.state.currentPage === page} onClick={() => this.onPageChange(page)}>\n          {page}\n        </Pagination.Item>\n      )\n    }\n    const childrenWithCurrentPageItems = React.Children.map(children, child =>\n      React.cloneElement(child, { [itemsPropName]: currentPageItems })\n    )\n    const paginatedChild =\n      Array.isArray(childrenWithCurrentPageItems) && childrenWithCurrentPageItems.length === 1\n        ? childrenWithCurrentPageItems[0]\n        : React.Children.only(childrenWithCurrentPageItems)\n    return (\n      <>\n        {paginatedChild}\n        <Pagination>\n          <Pagination.First onClick={() => this.onPageChange(1)} />\n          <Pagination.Prev\n            onClick={() => {\n              if (this.state.currentPage > 1) this.onPageChange(this.state.currentPage - 1)\n            }}\n          />\n          {pages}\n          <Pagination.Next\n            onClick={() => {\n              if (this.state.currentPage < pageCount) this.onPageChange(this.state.currentPage + 1)\n            }}\n          />\n          <Pagination.Last onClick={() => this.onPageChange(pageCount)} />\n        </Pagination>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { COUNTRIES_DISPLAY_TYPES } from '../../actions'\nimport CountryDisplayTypeContainer from './CountryDisplayTypeContainer'\nimport CountryStatistics from './CountryStatistics'\nimport CountryGrid from './CountryGrid'\nimport CountryDatatable from './CountryDatatable'\nimport CountryMap from './CountryMap'\nimport CountryBreadcrumbContainer from './CountryBreadcrumbContainer'\nimport Paginated from '../common/Paginated'\nimport { countryPropType, sortAndFilterPropType } from '../common/propTypes'\n\nconst ITEMS_PER_TABLE_PAGE = 12\nconst ITEMS_PER_GRID_PAGE = 6\n\nconst renderCountries = (filteredCountries, displayType, onCountrySelected) => {\n  switch (displayType) {\n    case COUNTRIES_DISPLAY_TYPES.GRID:\n      return (\n        <Paginated items={filteredCountries} itemsPropName=\"countries\" itemsPerPage={ITEMS_PER_GRID_PAGE}>\n          <CountryGrid />\n        </Paginated>\n      )\n    case COUNTRIES_DISPLAY_TYPES.TABLE:\n      return (\n        <Paginated items={filteredCountries} itemsPropName=\"countries\" itemsPerPage={ITEMS_PER_TABLE_PAGE}>\n          <CountryDatatable onCountrySelected={onCountrySelected} />\n        </Paginated>\n      )\n    case COUNTRIES_DISPLAY_TYPES.MAP:\n      return <CountryMap countries={filteredCountries} onCountrySelected={onCountrySelected} />\n    default:\n      console.error('Unknown display type', displayType)\n  }\n}\n\nconst CountryMainView = ({ countries, filteredCountries, sortAndFilters, displayType, onCountrySelected }) => (\n  <main>\n    <CountryBreadcrumbContainer region={sortAndFilters.filterRegion} subregion={sortAndFilters.filterSubregion} />\n    <CountryDisplayTypeContainer />\n    <CountryStatistics countries={countries} filteredCountries={filteredCountries} />\n    {renderCountries(filteredCountries, displayType, onCountrySelected)}\n  </main>\n)\n\nCountryMainView.propTypes = {\n  countries: PropTypes.arrayOf(countryPropType).isRequired,\n  filteredCountries: PropTypes.arrayOf(countryPropType).isRequired,\n  sortAndFilters: sortAndFilterPropType.isRequired,\n  displayType: PropTypes.string.isRequired,\n  onCountrySelected: PropTypes.func.isRequired\n}\n\nexport default CountryMainView\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Modal from 'react-bootstrap/lib/Modal'\nimport Button from 'react-bootstrap/lib/Button'\nimport { withNamespaces } from 'react-i18next'\n\nimport CountryCard from './CountryCard'\nimport { countryPropType } from '../common/propTypes'\n\nconst CountryDetailsModal = ({ t, country, onHide, ...restProps }) => (\n  <Modal {...restProps} size=\"md\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n    <Modal.Header closeButton>\n      <Modal.Title id=\"contained-modal-title-vcenter\">{t('dialog.title.details')}</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>{country && <CountryCard country={country} />}</Modal.Body>\n    <Modal.Footer>\n      <Button onClick={onHide}>{t('dialog.button.close')}</Button>\n    </Modal.Footer>\n  </Modal>\n)\n\nCountryDetailsModal.propTypes = {\n  t: PropTypes.func.isRequired,\n  country: countryPropType,\n  onHide: PropTypes.func.isRequired\n}\n\nexport default withNamespaces()(CountryDetailsModal)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Container from 'react-bootstrap/lib/Container'\nimport Row from 'react-bootstrap/lib/Row'\nimport Col from 'react-bootstrap/lib/Col'\nimport Alert from 'react-bootstrap/lib/Alert'\nimport { NamespacesConsumer } from 'react-i18next'\n\nimport CountrySidebarContainer from './CountrySidebarContainer'\nimport CountryMainView from './CountryMainView'\nimport CountryDetailsModal from './CountryDetailsModal'\nimport { countryPropType, sortAndFilterPropType } from '../common/propTypes'\n\nclass Countries extends React.Component {\n  static propTypes = {\n    countries: PropTypes.arrayOf(countryPropType),\n    filteredCountries: PropTypes.arrayOf(countryPropType),\n    fetchCountries: PropTypes.func.isRequired,\n    displayType: PropTypes.string.isRequired,\n    sortAndFilters: sortAndFilterPropType,\n    selectedCountry: countryPropType,\n    loading: PropTypes.bool,\n    error: PropTypes.string,\n    setSelectedCountry: PropTypes.func\n  }\n\n  static defaultProps = {\n    setSelectedCountry: () => {}\n  }\n\n  componentDidMount() {\n    this.props.fetchCountries()\n  }\n\n  render() {\n    const {\n      countries,\n      filteredCountries,\n      displayType,\n      selectedCountry,\n      loading,\n      error,\n      sortAndFilters,\n      setSelectedCountry\n    } = this.props\n    return (\n      <NamespacesConsumer>\n        {t => (\n          <Container fluid as=\"section\" className=\"py-2\">\n            {error ? (\n              <Alert variant=\"danger\">{error}</Alert>\n            ) : loading ? (\n              <Alert variant=\"info\">{t('content.message.dataLoading')}</Alert>\n            ) : (\n              <Row>\n                <Col sm={3} lg={2} className=\"bg-light\">\n                  <CountrySidebarContainer />\n                </Col>\n                <Col sm={9} lg={10}>\n                  <CountryMainView\n                    countries={countries}\n                    filteredCountries={filteredCountries}\n                    displayType={displayType}\n                    sortAndFilters={sortAndFilters}\n                    onCountrySelected={country => setSelectedCountry(country)}\n                  />\n                </Col>\n                <CountryDetailsModal\n                  show={!!selectedCountry}\n                  onHide={() => setSelectedCountry(null)}\n                  country={selectedCountry}\n                />\n              </Row>\n            )}\n          </Container>\n        )}\n      </NamespacesConsumer>\n    )\n  }\n}\n\nexport default Countries\n","import { connect } from 'react-redux'\n\nimport { fetchCountries, setSelectedCountry } from '../../actions'\nimport Countries from './Countries'\n\nconst mapStateToProps = state => {\n  return {\n    countries: state.countries.all,\n    filteredCountries: state.countries.filtered,\n    displayType: state.countries.displayType,\n    selectedCountry: state.countries.selectedCountry,\n    loading: state.countries.loading,\n    error: state.countries.error,\n    sortAndFilters: state.sortAndFilters\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCountries: () => {\n      dispatch(fetchCountries())\n    },\n    setSelectedCountry: country => {\n      dispatch(setSelectedCountry(country))\n    }\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Countries)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Form from 'react-bootstrap/lib/Form'\nimport { withNamespaces } from 'react-i18next'\nimport i18next from 'i18next'\n\nimport { SETTINGS_UNIT_TYPES } from '../../actions'\n\nclass Settings extends React.Component {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n    selectedUnit: PropTypes.string.isRequired,\n    setSelectedUnit: PropTypes.func.isRequired\n  }\n\n  onLanguageChange = e => {\n    const lang = e.target.value\n    i18next.changeLanguage(lang)\n  }\n\n  onUnitChange = e => {\n    const selectedUnit = e.target.value\n    this.props.setSelectedUnit(selectedUnit)\n  }\n\n  render() {\n    const { t, selectedUnit } = this.props\n    return (\n      <Form className=\"p-3\">\n        <Form.Group>\n          <Form.Label>{t('settings.label.language')}</Form.Label>\n          <Form.Control as=\"select\" onChange={this.onLanguageChange} value={i18next.language}>\n            <option value=\"en\">English</option>\n            <option value=\"fr\">Français</option>\n          </Form.Control>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>{t('settings.label.units')}</Form.Label>\n          <Form.Control as=\"select\" onChange={this.onUnitChange} value={selectedUnit}>\n            <option value={SETTINGS_UNIT_TYPES.METRIC}>{t('settings.units.metric')}</option>\n            <option value={SETTINGS_UNIT_TYPES.IMPERIAL}>{t('settings.units.imperial')}</option>\n          </Form.Control>\n        </Form.Group>\n      </Form>\n    )\n  }\n}\n\nexport default withNamespaces()(Settings)\n","import { connect } from 'react-redux'\n\nimport { setSettingsUnit } from '../../actions'\nimport Settings from './Settings'\n\nconst mapStateToProps = state => ({\n  selectedUnit: state.settings.unit\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedUnit: unit => {\n    dispatch(setSettingsUnit(unit))\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Settings)\n","import React from 'react'\nimport Tabs from 'react-bootstrap/lib/Tabs'\nimport Tab from 'react-bootstrap/lib/Tab'\nimport { withNamespaces } from 'react-i18next'\n\nconst About = function({ t }) {\n  return (\n    <section className=\"p-3\">\n      <Tabs defaultActiveKey=\"app\">\n        <Tab eventKey=\"app\" title={t('about.tab.app')}>\n          <article className=\"p-2\">\n            <p>\n              {t('about.app.part1')}\n              <a href=\"https://github.com/vncntcltt/react-countries\" target=\"_blank\" rel=\"noopener noreferrer\">\n                GitHub\n              </a>\n            </p>\n            <p> {t('about.app.part2')}</p>\n            <p> {t('about.app.part3')}</p>\n          </article>\n        </Tab>\n        <Tab eventKey=\"tech\" title={t('about.tab.tech')}>\n          <article className=\"p-2\">\n            <ul>\n              <li>\n                React\n                <ul>\n                  <li>create-react-app</li>\n                  <li>react-router</li>\n                  <li>react-redux</li>\n                  <li>react-bootstrap</li>\n                  <li>react-i18next</li>\n                </ul>\n              </li>\n              <li>Bootstrap</li>\n              <li>Leaflet</li>\n              <li>Storybook</li>\n            </ul>\n          </article>\n        </Tab>\n        <Tab eventKey=\"credits\" title={t('about.tab.credits')}>\n          <article className=\"p-2\">\n            <p>\n              {t('about.data.countriesData')}\n              <a href=\"https://restcountries.eu/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                REST Countries\n              </a>\n            </p>\n            <p>\n              {t('about.data.countriesGeoJson')}\n              <a href=\"https://github.com/johan/world.geo.json/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                world.geo.json\n              </a>\n            </p>\n            <p>\n              {t('about.data.icons')}\n              <a href=\"https://www.freepik.com/\" title=\"Freepik\">\n                Freepik\n              </a>{' '}\n              {t('about.data.from')}\n              <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n                www.flaticon.com\n              </a>{' '}\n              <a\n                href=\"http://creativecommons.org/licenses/by/3.0/\"\n                title=\"Creative Commons BY 3.0\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                (CC 3.0 BY)\n              </a>\n            </p>\n          </article>\n        </Tab>\n      </Tabs>\n    </section>\n  )\n}\n\nexport default withNamespaces()(About)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withNamespaces } from 'react-i18next'\n\nconst Footer = ({ t }) => {\n  return <footer className=\"bg-secondary p-3\">{t('footer.info')}</footer>\n}\n\nFooter.propTypes = {\n  t: PropTypes.func.isRequired\n}\n\nexport default withNamespaces()(Footer)\n","import React from 'react'\nimport Navbar from 'react-bootstrap/lib/Navbar'\nimport Nav from 'react-bootstrap/lib/Nav'\nimport LinkContainer from 'react-router-bootstrap/lib/LinkContainer'\nimport { NamespacesConsumer } from 'react-i18next'\n\nconst MainNavbar = () => {\n  return (\n    <NamespacesConsumer>\n      {t => (\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\" sticky=\"top\">\n          <LinkContainer to=\"/countries\">\n            <Navbar.Brand>{t('countries.title')}</Navbar.Brand>\n          </LinkContainer>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <LinkContainer to=\"/settings\">\n                <Nav.Link>{t('settings.title')}</Nav.Link>\n              </LinkContainer>\n              <LinkContainer to=\"/about\">\n                <Nav.Link>{t('about.title')}</Nav.Link>\n              </LinkContainer>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      )}\n    </NamespacesConsumer>\n  )\n}\n\nexport default MainNavbar\n","import React from 'react'\nimport { Route, Redirect, Switch } from 'react-router-dom'\n\nimport CountriesContainer from './country/CountriesContainer'\nimport SettingsContainer from './settings/SettingsContainer'\nimport About from './about/About'\nimport Footer from './Footer'\nimport Navbar from './Navbar'\n\nconst App = () => {\n  return (\n    <>\n      <Navbar />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/countries\" />\n        </Route>\n        <Route exact path=\"/countries\" component={CountriesContainer} />\n        <Route exact path=\"/settings\" component={SettingsContainer} />\n        <Route exact path=\"/about\" component={About} />\n      </Switch>\n\n      <Footer />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { ToastContainer, toast } from 'react-toastify'\n\nimport i18n from './i18n'\nimport { store, history } from './store'\nimport App from './components/App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <>\n        <App />\n        <ToastContainer position={toast.POSITION.BOTTOM_RIGHT} />\n      </>\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register({\n  onUpdate: () => {\n    toast.warn(i18n.t('serviceWorker.msg.cacheUpdate'))\n  },\n  onSuccess: () => {\n    toast.info(i18n.t('serviceWorker.msg.cacheSuccess'))\n  }\n})\n"],"sourceRoot":""}